%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: FreeVector-Nestle-Logo.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: wdc%%CreationDate: 4/4/11%%BoundingBox: 0 0 842 596%%HiResBoundingBox: 0 0 841.8897 595.2750%%CropBox: 0 0 841.8897 595.2750%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2011-04-04T13:26:12+02:00</xap:CreateDate>
         <xap:ModifyDate>2011-04-04T13:26:12+02:00</xap:ModifyDate>
         <xap:MetadataDate>2011-04-04T13:26:12+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7PirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVeP2115489ed/MNpZ6/L5f0ny7cG0iitkDPI4d0DuCVLBvSJ+LboAOuKo27sPznb&#xA;Tv0lovm2w1f0AQLWK2gCT+kSD+9o/wC8am45KK9xirL/AMvPN581+WLfVZIPq12GeC9txWiTxGjA&#xA;V3odjQ9K0xVI9U/M/UZvMV55e8o6DJr19YVS+uWmW2t4JenEs4PLiRuKrWhAxViOr6f+YNpo2oeZ&#xA;4PO0lxrmikvq+koP9CiYKsjQKtfTLIrfy79NsVeseUdbfXfLGmavJH6Ul9bxzSRitA7L8QFe1ent&#xA;iqV+Y/zN8n+X74adeXbTajTk1laxvPKo6/GEBC/ImuKpp5a81aD5lsDfaNdC5hVuEooUeNx+y6MA&#xA;yn54qmruiIzuwVFBLMTQADckk4qwe8/Oz8trW5kgbVfWMJpLLBDNLEu9P7xEKn5iuKsp0PzBouu2&#xA;IvtIvIr21JoZIjXi38rKaMp9mFcVTDFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXlP5gSW/kjz1pHnSG1kTTL71bTzFJb8qMWUCF5EB4kjr708cVQsTQQapdeaPysvYtUgYibX&#xA;vK6MVWUPX97CjANHJsTSny/lKqj5n0seU7Wz/Mjy4b3T4J7mK617RJmIR4rxx6gMLbI/J+NOg2pS&#xA;mKorQbPznpXlC5/ROm+jrnnHUpb23cEyLYW90itzuZOKjlGoPEe/StRiqU+e5PLuj+UdL/LzQbr9&#xA;JarqN5D9eWB+byln5SvOyE7yPSik9PYYVeked/Mdn5L8ntLZxKJ0RLLRrJB9qZhwiRV7hQKkeAwK&#xA;l3lf8u7jS/KFxAL97PzTqq+vqmuoqyTieRg7qGcbov2e3jscVYB5uhh8wef7OTyPDNf3NsyjXdT0&#xA;t3smdhQH1L0H6vUgV+GOvXfFWZ/mXcXGo2uieRbKV4tQ1ySIaiiuZJYtPiFZ3eTcmvGlT9rfFWQ+&#xA;XbZtK1Ofy3ZaCLHy7Z20TWuoK6FZpGqHVk+0W8Sd9t+oxVjPmfylqflTWP8AGHkm25K3/He0CH4Y&#xA;7mIbmSJAKCReuw+XcMqzPyp5u0PzTpa6jpE/qR/ZmhbaWJ+6SL+yfwPbFU5xV4d+ZupW+p+aNduj&#xA;PcJp3lXTFhraSvEX1O6lAhjLJ1A5fEP8k4VZCl7rXkvyPpmhRXM2qeeda2tYriR5yk0orI59Qtxi&#xA;t1+gnem5wKmv5a+ftR16W+0XWLYDWdIYxXd9a/vLKYqaVWVfhV/FP7QFWd4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FWC+ePzEGl6rF5Z0rRpPMOt3cXqSWKELFHE21ZWKuN/AilOpG2KsU0fy&#xA;R5suPP8A+m6WnkZ3tlVdPspIbqS5CAB+UQIi4jbkQm23U/FirKfzP8wadHpraVeRLc6JcN9U8x3E&#xA;LB5dPWePlbzNGtWHxkNUjoPGmKpWuofnLY6PFo1hpNlqreksVn5ljuY1iMXGiStAxDcgtDsaE+OK&#xA;qA/wr+W+n6bptnpsOtefZ4hHEltGDcyyPu8kktCyR1PU7kfIkKproXkTUrnUovNvn69S61S0BmtN&#xA;PUhbGwA+KorszrSpY9PE0BxVjvn/APM7QNcnsPL+n6o1toN3cGLXtcSOURrEgr6EcvGn70/CWGw/&#xA;1a4q9V0LTtG0/Sre10WKKLTUQfVxBQoQf2uQryLdS3fFXlvnb8sPMdz5xi1by/FLcGY+rql1eXpi&#xA;SYcgUtgkVHEScBUcfYdMKp+PPXnLQtUsLbzlpFrb6bqM62kGqafKzxxzyfYWRH+IA+O2BXoWKvPf&#xA;N3kPU7PVj5u8kMtrry73+n/Zt79K1ZXWoAc+Pf2O+Kpe35zSatp8OmeXNMnk853XKGXTZUYJZSKe&#xA;LyTuwA4Idx/w1MVR3/Ko0PkN9A/SBTWLm5XUbzV+HqGS9DcyzK1CV7Df38cVXweUtG8v2ep6l5p8&#xA;wiXXtVt3tptduWjtmijdCoS1QnjGFJqOPU/dirzO91vTdO8r3Gg6V57muxawOthp+k6ebXmwHwma&#xA;5VWLcyfjIbfucVe8+VOf+F9H515/UbblXrX0VrXFU0xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;pV5q1ptD8tanq6R+q9jbSTxxGtGZFJUGm9K9cVYF5O0vWz5XuvPMGoW915q8w28bzXd6RFZ2sKml&#xA;FWNSf3SD4gTuRv7qpMdSstD1Sz0/yzqsPmX8w9dnWK/1qf8A0iOGClXoIyVjReoRSdhv0AxVk3ld&#xA;PKnlmHV7fzP5o02/1zVZjJrX1ieCP9jgIfRZq8VXsR36YqxIedbvy7qbeWPy/uofMdnqYb9EWwdp&#xA;G06Yn41504vAAeS1bbvtWqr0PyJ5Ct/LkU2palMNQ8y31ZNT1aXdqncxxk/ZjWn0/cAqkfmXW/8A&#xA;H12PKXluR5dJWZf8SazFtAsCfE1tFJ+3JJSnw7U8RWiqaeaJfLnloW5vb8W2iGzfT7byukCTR3Ds&#xA;w4ssKj1HP7JHT3G9SqR/kt5U1rSW1G91LTZtPS7dntA8xhX02Iop09GdIiKdWYsOmBXqeKsN/ODS&#xA;5NR/LrWEiBM9tGt3CR1U2zrKxH+wVsVQOqfmDe2k3k7V19M+WNfAhv5ePxQzzoGhJevwjlUN8jhV&#xA;6BgVgHn3yTqS3y+cfKBFv5os1/fwDaO+hH2opV2Bag+E9+ngQqxXVPzX86earMW/kXSLmL0ljGsX&#xA;vBJJYJHryhhWQqpK0PxHf2HXFWL6rpflmC6tL7Uf0xo2vwtWW+8zWf1+zumbtJTmAKnYhdvnvir1&#xA;z8p/MF7rnl66uLmCyiFtey2kD6cjR280cIX98gYk0ck06YqzXFXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FVK6tbe7tZrW5jEtvcI0U0TbqyOCrKfYg4q81t/yLsIJGs01/Uh5ZeX1X0ASEQtvy4Mw&#xA;O6Hv8NT413xVMvMOq/l9+W4hnttHjj1TUSYrS00+3T6xMQQOIIpRauO+/YHFWDeYda8zaXaSa6n5&#xA;e6Ppf1mdVjkv1jubyeeZ6gBI/TlLsfiocVZR5X03SPIOlTeZvNs8Y8yawazLGgLjkQVs7WJOtNqh&#xA;RT6AMVRf6E81ee6S+YfU0Lys+6aDE3G7uV7G7lX7Cn/fa/TvviqKt/OGjaJrGpaBp+nxwaB5b043&#xA;WoXkJCpDN1W3CAUZ2Tf7VScVYhpXkL8wfMl5H55bXotI1HUo/UtbdrVZ2trZqmKONpD8FYzU8QDv&#xA;virIY/If5qFCZPzBdX7BdPhYfeXX9WKtReSvzfjbkvn1SSKfFYQuPuaoxVSn0T87YIfSbzHpGoCU&#xA;FDDeW4hEnI7r+6j3qNsKse8qaRefom//ACl84RpbXFxE91oNwjc4ypYyERsdyY5AWp1pyBwKzj8r&#xA;fM97qOlT6JrPweY/L7/U9RjY7uq7RTivUOo69zv3GKs2xV5lr6f4C88w+ZYKp5a8xSLa69EPsQXR&#xA;/urqnYNvyPz7kYq9LkjiljZJFWSNxRlYBlIPiD1xVD6bpWm6Zbm2061is7cu0nowII05OaseK0G+&#xA;KorFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXgn50rq2pfmfoGlG6h0pEi9XSdSZjtO5&#xA;qpcj7P76JVXbbriqYXHmz8yYryx03X/I/wCmNfsHMulalCzC39SnD1m4K0XQ7/EtD2U4qiX1L80Y&#xA;Nag1DVNB8u6jq8akxWUUscepRpSvGN3dj0btywqyzy/+Z2i67cvod2tz5e8xSKyCwvE9OXkQRyhd&#xA;hwcjqKjfwwKl/mnRPy/0vypN5Vudbh0dLyRLi+lmlV7u5IcSyNLVhIzS8d2+gbbYVZSvnTybFog1&#xA;VNWtF0mM+itwsi+nyUD92tOrAEfCN8Csfk/PX8rkkCfpgtUkM6210VFPH91v9FcUoi4/Ob8tIbX6&#xA;x+m45QRVYo0laQ16DgE5D6cUMP8AP3k2985aZfebI4bu4lkt7aPyxpg5QzQVkHryzRnarEk7V+Hf&#xA;w4qoW5lkv9Cv/Lvma+Fh5z8kA3ula1UhpYIhySYE7uGUKrjqfhO5riqYXX+IpdH0P81bKy9LW4rY&#xA;fp3Toq0vLAndgP5goEi9aCnXiBirIvMus39zpGlee/K1zNeWNmpmvdLRyEurNx+9BjrxE0NKjao3&#xA;HtirILmHQfO/lCSNHFxpWrwEJKButfssAejxuK+xGKpF+VGuXs2mXXlrV2/3OeWpfqVyT1khH9xM&#xA;K7kMgpX2r3xVnWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4h+eWgaLZ+ZtL8x6xD&#xA;JcaNqEbabqIiNJYXALRTw1/aAqadDxp3xSjtDT83dLsIZfK+qWHnLy861s5LluE6oBshZmjII6UZ&#xA;zTwGKGP34/LyTyxeW+qabbDzxJLKtta6LNPe3QuesbNLyk+IP9oc2H07AqmPlXyv+db29tJeeZ4d&#xA;NvVjJtLK9Edzdemaf3hZHYKafzE+O+BUD5c0jVPJmq6lc+d/KNx5kur6UOms20aahtvyoj04cj3P&#xA;E9qYqmdxcafrWrR6hpn5eapqD26COytdUWOx0633q7JEeUNWPxNXqfDFU3nufL8nl6ePW7PylF5o&#xA;kcx6ZYExTxgtRY0l6OGqSCUNBthVJ08vfmVp6vJYeVvLOgzqvxa0gQGId3Qs0hSnXdTgViZf8v8A&#xA;T7iOK91TUfNnmu8nEct9YXEkMMbyOAPTmb7Zr0O4PtirOvzl/LO5v/L+nanpSTajquiQpbXAeslx&#xA;eWqAAlytGeQGrGnWre2KUp8wSeZ/M/ly/wDMutW9x5X0HQbSR9C02Nmhme94enHK5ojcVY8V+EbH&#xA;bvVQv8mL5g/LbTNP1e6uTqvknW44bm8eNG9SxluI1ZZSlW+A8qMR18AaVVZBcm48h3h8x6Av6Q8h&#xA;aqwuNSsbc8/qjyf8fVsBt6TCnJRt9FKKrfNuo2Oj+YtD/MrSZ0uNEvwuna5LEao1vKf3Uxp3jYUN&#xA;d9gMVepKwYBlIKkVBHQjFW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY1+Yfku383+W&#xA;ZtJkf0p1YXFlMRUJPGCFLDupDFT7HFXiejMmiTXZsfMI8j+ZLOQx6tot2GlsJmA2mgBEgow6LRiP&#xA;2TSmKpxpOu/mRrVtcHy55n8v3OqEMXitYfQvJVArUC4t46n6Ke+KpN5Wufyoexkb8xEvl81TSu95&#xA;eXgvOXIMeHpGAkjitK8h19qYpZh5c8/fl5oVy403zZrGr2jKRHpcsE1yqE0A4tJAsgA7APTxxQmH&#xA;l/yxY+d1utR8x6jrGpWccpEGn3kL6Xa+nSqkRREerT+bl8xhVDal5N/JHXGm8taRJY2+uyxt9Ult&#xA;XZ3SRFrWoYo9KfEpNaV+eBUm1byLbaLaW0v5kea7rWIIqJp+gWzSEzsuyqqlub12FQF92xVJNVTV&#xA;LLXdI1J9Hh0/VGPpeT/KEKjlEzNtd3lKUIah3oWYb0CnFWcah5N872+nQTaj5k13U9XuyFey0d47&#xA;WFGO7AzOAkaDpzNPZcKsY/Mq8/MPUJfL/lDW4LbS9K1m7gtojFObu5bi6R1nkYgvxMisTxFW74Fe&#xA;36dolhY6FbaIqmewtrdLQJPSTnEicKPUUNVHhiryq/1C5/KrzNFp9ss+o+TdWSW5/R9DJJZCNh6x&#xA;hJJ5Iofkynt9JKq/XPJEl15fvNQ/Ly4iv/L2tRMb3y8zf6O7H/dtoTT0ZkYA8T3HtxxVkX5L+ZLv&#xA;VPKY0zU1eLWdCYWV7FMCsgVR+5ZlO/2Bx36lTirP8VdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirFvzJ87/4N8tnVFtvrdzLMlta25YqGkkDNuQCdlQmg64qkcmhfm7rMLNq2t2+i2xXkbLRY+Vw&#xA;wHRPXuGXg3uGpirDvLvmL8kdL1C6i1PT7ltQhlKXOqaui6iWcbVMkTXCK3+quKs4vvIv5a+dtNW9&#xA;0gW8U6mtvqulFIpYpBuOXp0qQf2XFfliqT6dbf8AOQNtLcaYt1plxb2XEW+q3yuGuU6inpcjyA2b&#xA;kv0nriq/R9b87eY9VvNLm1JvLXm3RkX17ARR3On3MLHaZFceoK1Ar6hpUU7jFUPrfk/zFdobn8yv&#xA;NyQaArhBZ2ANvA5boJ5Cq0B6fFX2IxVi/wCY0X5SWGiW975O1G2svMWlSRy2BsneRpaOKiRxzqw+&#xA;0GY9qd8VTbTPP3mfzT9W1Hy15MSXzGbdba48w3SqsEVK8vRdqbVYmnOvahxVEaP+VH5labrv+LDr&#xA;en33mORWEyXsUskPxClFkUK67bfAooNumKoDzd5s8xfW0sPNOpW1xIH/AHXlTy2ZWnupAfgS5nPJ&#xA;okr1Ubn+XFU98q/l35k1zzJB508+SBLy3ZJNL0aI0S34HlHzoduLfFxB67se2KvV8VYN+YgW18xe&#xA;StWIBEWqGwckVHHUIWiIPsSoxV55Zxa/5M1fzpqWgXIMOiX4n1DQJR+4lsbsCWJ4+O8bxqT8X8vy&#xA;oVUfY+f9AH5i6b5is2ayOtqul+YtKuB6c0M1AbW4IP2lOy8xsF9zir23FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq83/PBI49L8vajcDlY6frdpNfDsIfiDE/q+nFXoV3aWt7bNb3KCa2lADxn&#xA;7Lr1o1OqnuOhxVbb6bp1ta/VLe1hhtKU+rxxqkdOn2AAuKvLbbQrXR/z6ij0P/QbG40p77WLWIhY&#xA;WJeSIEqNl+Pg3Tr88VTjVvzLuNYuJtD8gQjVNZVjHcag4K2VoASDI8hHGQ7fCFrX36FVjv6N/Ofy&#xA;9rv6Ym02w813XofVhqKEQ3CwljJ6dAYRTkf5G+eKox5/z818SJ+jtK0Syk2Ed3SZio/mAM9d/FBi&#xA;rX/KuvzWY8/8RaVE3XgmmWpCn2LQVwqiX8rfnwlFh842JjAAFbOFae1BbtgVp/yx/MHWX4eZ/O1w&#xA;9nsGttOjW25juGKBF+9GxVlvlP8ALzyj5VT/AHEWCpcEUe8k/eTt/wA9G+yD4LQYqyTFXYqwj85Y&#xA;ZD5Cu72EVuNLmtr6HtvDOhO/b4ScVSu9S0/5WwkEnx6Z5y0N4HH88kAJPz/cHCqD8veSNA85eTl0&#xA;nXoSNb8uTTaQ2oxUjuENq1IiGoeSmIoQGqPDAr1Gyhmgs4IZ5jcTxRoks5HEyMqgM9KmnI79cVVs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVSvzP5esvMWgXui3u1vexlC4FSjA8kcV7o4DDFXmm&#xA;mR/n55asksIrOw1vT9OHpws7gTywr9niecZqq7DkK/PFU2t/z78jJp7PqrXGnatDVbrSHglaZJVN&#xA;GQMFCdR+0R70xSwPR/LXnj8yfNOqa7O8+g+XdS4QzsarLJax04QRVA5A0qzfYrvv0xQ9z8veXdG8&#xA;vaZFpmkWy21pF+yv2mbu7t1Zj3JxVMsVdirsVdirsVdirsVdiqVebNMOq+V9W01V5Pd2c8Majrze&#xA;Mhaf7KmKvJfLel+ZfzBj8vNOlx5es/KduIP0kF43c93wSN/S5CioBEOVR12+Sr0nyX5JHlqTU55N&#xA;TuNUu9VlSa5nueIPJFKigUeB3xVk2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVCPp&#xA;Gkvd/XHsoGu/+WgxIZNv8sjliqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV5/wDnP551jyh5ctbvSRH9aurpYDJKvMKnBnNF23PEYq8z8of85D+Z&#xA;Tr9rF5iNu+kzuIriRI/TaIMaCUEHop3YU6YpfRgIIBBqD0OKHz95s/5yF83aX5n1XTLKw0/6rYXc&#xA;1rG0yTPIwhkMfJissY3416YpSr/oZfz3/wAsGl/8irj/ALKMVd/0Mv57/wCWDS/+RVx/2UYq7/oZ&#xA;fz3/AMsGl/8AIq4/7KMVd/0Mv57/AOWDS/8AkVcf9lGKu/6GX89/8sGl/wDIq4/7KMVZj+VX5zea&#xA;vNvmkaTqOnWotWhkka4tEmQxFBUF+cko4sfh7bnFUv1b8+vMVr+Yk2jQ2VudJtr82DxsG9ZwkphZ&#xA;xIDQEn4h8OKvUPzJ8y33lnyVqWt2KRyXdqIhEsoJSssyRVIBUmgevXFWEfk5+bHmLzdqmpWWrwwU&#xA;tbYXELWyMjVDhWUgs1a8hTFUm1D/AJyM19ZpI7Xyq0XBio+sSSM2xI+JVjSh9q7YoSS6/wCcg/zK&#xA;l2g0q0t17EW87t08Wkp+GKWW/k7+Y3n7zN5kurTW4Q2nJbGX1Vg9IRyBlCjkP5wTsfDbFD2PFXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8d/5yb/5RPSv+Y/8A5kyYpfO/1K6+pC+9M/VTIYPV&#xA;7CQLy4n/AGO+Kvpv8hfPP6e8rjSbuTlqejBYjXq9sdon9+NOB+Q8cVeF6/8A+TZ1L/tvTf8AUY2K&#xA;vpT8xvzL0fyTp6SXKG61G5B+p2KMFLcerO2/BB40PsMUPFJ/+cifzDuJWmtrezht4zVo0gd1APTm&#xA;zOT29sUs7/Lf8/LfX9Rh0fX7aOxv7ghLW6hLehJIdghVizIx7bkH2xVOvzS/OCz8lvFp9rbC+1id&#xA;PVETNxiijJIDSEbktQ0UfPwqq8sH5/fmgym/W0tfqQJqRaymDr/Pzr7faxVm/lj/AJyCh1XSNR+s&#xA;6b6eu2VrJc29tExMVz6QqwU0LqVHxEb/AAgmuKHgd7r0t35nuNfaJVmuL179oATxDPKZeFetKmmK&#xA;XqOu/m9qXnbyH5n0+60tLWO2t7W4FzCzsoP1+3Tg3IdW5VG/Y4qt/wCcZP8AlK9V/wCYD/mcmKsm&#xA;/MH/AJyFi0rUJtL8s20V7PbsY57+fkYQ42ZY0QqXp/NyA9iN8VYfa/8AORX5gWs6PfWlpPA55ek0&#xA;LxEqf5GDfiQcVe4fl/8AmFo/nXSmvLEGC5gIS9snILxM3TcU5K1DxbFDKMVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirx3/AJyb/wCUT0r/AJj/APmTJili/wCTvlO181/l15n0WUqs0lxFJayn&#xA;/dc6xkxv8q7H2rirAPJvmLUvI3nSK8ljdHtJWttStehaLlxlQ+4pUe4GKqmtTW8/5o3VzbSrNbXO&#xA;sNcQSr9lo5rn1FI+hsVRf50avPqX5j6uZWJS0cWkC70VIVAIFfF+TfTirMNC/wCcg9J0PSIdK07y&#xA;gkNnCgTgLwfGaUZn/wBH+Jm/aJ64q8w8z61Yap5guNV0vTxo0M7CRbOKTmscgA5MjBIuILfFQDbt&#xA;irM/zg0XXrx9J85SwtLYazpllLLcICVinMC8ken2a9R44qm3lP8A5yGutL0m10fVdFhu7K2hW2V7&#xA;dvRb0kXiOUbB0bbr9nFWZflZH+TWra9+lPLdnJY69bh5Fs7h5AyCQFXaJObxstGI2Ow7DFDxrX//&#xA;ACbOpf8Abem/6jGxS+h/z0/8lXrf/Rr/ANRkOKvCPyu1e40jTvOF/bMUuI9HZYnXqrSzxxhh/ql6&#xA;4qx/yT5h0zy9r0Wq6hpS6wkCt6No8giQSmnGRqpKG4itBTrv2xV6D5u/PrS/NGh3Ok6h5VUrMjCG&#xA;c3gZoZKfDKn+jjdT779MVSr/AJx81O4tPzHtrWMn0tRgngmXtRIzOpPyMWKvqfFDsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVeO/85N/8onpX/Mf/wAyZMUoH/nF/wD45/mD/jLbf8RkxVKf+cjP&#xA;I31XUIfNllHS3vCINSC9FnUUjk/2aih9x74q8j8v/wDHe03/AJioP+Ti4qz/APP7ypdaV51m1UIT&#xA;p+sATRS9QJVULKhPjUcvkcVZd5c/Mj8kp9Fhk1vQLCz1WNALmFdMidZJABVoykZUButGpTFWJT/m&#xA;PZ6n5mitPLfkrRDaTzJFZ202nwtcSVanxMvwqW9h8PvirMPzD/OLzb5U84zaKumWZ0eFIvSgkR/3&#xA;0LxjlxcMq0rVR8O1OmKrNT8zf847a9pTXd/ZrZXzpV4La3lhuVkI6BoVELn3YkeOKvNPymhu5fzK&#xA;0P6gHql1zYjqIVBMnIjt6dQcVW/mFBdaJ+Z+sSyx1kTUnvo1bYMksvrp9BDDFXrvn/8AMnyt5w/K&#xA;rX10md/rUCWclxaTIUkQNeQj/VYA7EqTirz/APJHQxr0vmjRywRr3SJIo3PRZDKhRj7B6HFWPeT9&#xA;SsPKXnBl80aPHf20XO11CxuYY5WjNR8aJKCvNSv0iorvir1DzJ+ZX5KWmltJoXlzTtR1Jx+6hfTY&#xA;4o0PjIzRrsPBa4qivyI8w3Wva1qEz+XtKsLa1gFNQ0+zS2dZXYUi5LXkGWpPyxV7Zih2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2Ksf8AO3kfRPOOlJpureqsUUonilgYJIjhSuxZXXox2IxVR8jf&#xA;l9oPkuyuLXSWnk+tOJJ5rl1d2KghR8CxqAKnouKpxrei6brelXOl6lCJ7K6ThLGdu9QQRuCpFQfH&#xA;FXnun/8AOO3kWy1KC+S41CU28qzJBJLF6ZKnkAeMSvSv+Vil6DrehaRrmnSadq1ql3Zy/aikHQjo&#xA;ykbqw7EGuKHmV1/zjT5LlnZ4L+/t423EQeJwvsC0dafPFLLvJv5WeT/KMn1jTLZpL4qUN9ct6k3E&#xA;9QtAqLXvxUYoTDzZ5H8s+a7RbfWrMTmOvoXCkpNHX+R13+g7e2KvPn/5xm8nGUldS1BYyahOUJIH&#xA;hX0/4YpZ15O/Lryr5Rjf9D2pW4lHGa8mb1JnXrx5GgA9lAGKFvnL8t/Kfm4Rtq9qfrUQ4xXkLenM&#xA;FrXjy3DL7MDTtiqQ6V+RHknTtM1TT0kvJ49WiSGeWaVOaJHIsq+nwjRR8aKd1PTFKaeRPyr8teSr&#xA;i6uNLkuZ7i7QRvLdOjlUBrxX00jG564qu86/lX5R83uLjUoHhvwoUX9swjlKjoGqGV6f5S4qxOz/&#xA;AOcavJUM6yXF7f3Ma9YS8SK3zKpyp8iMVem6LoekaJp8en6Tax2dnHusUYoKnqzE1LMe5JrihHYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FU3/AMMal4x/8Ef6Yq7/AAxqXjH/AMEf6Yq7/DGpeMf/AAR/pirv&#xA;8Mal4x/8Ef6Yq7/DGpeMf/BH+mKu/wAMal4x/wDBH+mKu/wxqXjH/wAEf6Yq7/DGpeMf/BH+mKu/&#xA;wxqXjH/wR/pirv8ADGpeMf8AwR/pirv8Mal4x/8ABH+mKu/wxqXjH/wR/pirv8Mal4x/8Ef6Yq7/&#xA;AAxqXjH/AMEf6Yq7/DGpeMf/AAR/pirv8Mal4x/8Ef6Yq7/DGpeMf/BH+mKu/wAMal4x/wDBH+mK&#xA;u/wxqXjH/wAEf6Yq7/DGpeMf/BH+mKu/wxqXjH/wR/pirv8ADGpeMf8AwR/pirv8Mal4x/8ABH+m&#xA;Ku/wxqXjH/wR/pirv8Mal4x/8Ef6Yq7/AAxqXjH/AMEf6Yq7/DGpeMf/AAR/pirv8Mal4x/8Ef6Y&#xA;q7/DGpeMf/BH+mKu/wAMal4x/wDBH+mKu/wxqXjH/wAEf6Yq7/DGpeMf/BH+mKv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0430F0165FA711E08878D6880F1AE1C0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0430F0175FA711E08878D6880F1AE1C0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0430F0155FA711E08878D6880F1AE1C0</stRef:instanceID>
            <stRef:documentID>uuid:14A34F214D8711E08B7F8A3DEBA23B21</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:Type>Document</illustrator:Type>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -595.275 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 595.275 li841.89 595.275 li841.89 0 licpclp[1 0 0 1 0 0 ] concat841.887 595.278 mo0 595.278 li0 0 li841.887 0 li841.887 595.278 lifalse sop/0 [/DeviceCMYK] /CSA add_res0.0767705 0.0687735 0.0679738 0.0907651 cmykf458.766 116.929 mo456.016 116.929 453.785 119.16 453.785 121.91 cv453.785 124.662 456.016 126.893 458.766 126.893 cv461.518 126.893 463.749 124.662 463.749 121.91 cv463.749 119.16 461.518 116.929 458.766 116.929 cvcp0 0 0 1 cmykef391.874 118.071 mo394.191 118.071 396.067 116.195 396.067 113.875 cv396.067 111.56 394.191 109.681 391.874 109.681 cv389.557 109.681 387.677 111.56 387.677 113.875 cv387.677 116.195 389.557 118.071 391.874 118.071 cvcpef358.645 200.836 mo359.906 195.833 353.282 195.096 352.375 199.705 cv351.406 204.645 345.38 213.069 339.688 218.351 cv341.728 220.542 li349.205 214.955 357.034 207.228 358.645 200.836 cvcpef299.294 119.811 mo295.233 105.48 305.652 96.9243 316.533 97.7144 cv320.61 89.8716 327.008 88.3081 333.802 92.3784 cv340.144 96.1802 339.616 105.842 334.326 110.375 cv336.216 118.981 328.559 131.256 316.679 130.652 cv318.09 142.532 303.484 149.286 294.632 141.526 cv287.281 135.081 288.821 124.343 299.294 119.811 cvcp237.297 186.918 mo247.869 190.945 259.191 184.415 259.497 172.747 cv271.277 173.856 275.799 164.582 274.7 154.8 cv270.975 154.499 li269.358 163.576 265.035 167.484 255.167 167.484 cv254.738 176.22 245.398 183.797 234.83 181.785 cv231.858 188.754 223.152 191.045 217.209 185.205 cv211.269 179.368 213.231 168.391 223.704 166.405 cv223.275 155.707 233.714 149.076 248.619 149.78 cv252.846 144.544 256.269 142.33 262.614 142.934 cv262.667 139.899 li256.728 139.095 250.027 133.471 249.522 127.431 cv236.839 128.437 228.156 121.172 228.588 109.797 cv220.433 105.969 221.891 97.6182 224.53 94.4404 cv229.083 88.9688 235.431 89.4067 240.567 93.8364 cv255.067 88.3013 266.745 99.7266 266.745 112.211 cv266.745 112.211 273.525 112.078 277.32 116.036 cv282.344 121.289 282.354 125.857 283.556 130.954 cv284.688 135.772 287.108 142.157 293.019 146.762 cv303.487 154.914 319.697 152.699 321.341 135.52 cv335.279 136.768 344.43 125.847 339.841 112.49 cv349.583 105.543 347.644 91.23 338.483 85.6816 cv327.005 78.7354 316.377 85.9009 313.508 92.7969 cv299.234 89.5229 287.609 103.721 294.253 117.613 cv290.475 118.433 288.516 120.333 286.833 124.419 cv287.965 115.129 281.772 106.221 271.576 106.902 cv272.588 90.2866 256.097 80.3955 241.523 88.4741 cv232.911 81.1162 223.285 82.6235 217.515 89.4565 cv211.97 96.0176 212.149 107.051 223.325 112.941 cv220.506 124.419 231.028 135.822 243.413 133.179 cv244.117 136.702 246.71 138.591 250.13 139.999 cv244.997 140.301 242.885 145.411 242.885 145.411 cv226.466 141.224 218.013 152.094 217.737 163.533 cv205.754 167.159 202.41 182.11 211.571 190.842 cv221.054 199.884 232.363 196.178 237.297 186.918 cvcpef326.806 101.639 mo324.335 99.8794 li319.707 104.109 308.68 117.898 303.544 126.256 cv306.31 128.334 li313.558 122.447 322.018 111.723 326.806 101.639 cvcpef229.188 172.571 mo231.503 175.087 li237.446 172.215 248.623 163.961 254.666 157.769 cv253.002 155.302 li245.903 158.273 234.93 166.378 229.188 172.571 cvcpef239.957 102.26 mo237.496 104.76 li241.019 109.797 256.625 123.739 264.53 128.925 cv267.449 125.316 li262.262 119.223 247.51 106.085 239.957 102.26 cvcpef515.356 272.708 mo507.707 273.914 493.104 278.446 487.848 284.422 cv490.74 285.242 li495.674 282.523 500.956 280.61 506.996 280.61 cv512.335 280.61 514.692 282.021 514.692 283.516 cv514.692 284.575 513.689 287.105 513.295 287.898 cv512.836 288.818 512.534 289.974 511.635 290.953 cv504.439 298.772 496.265 305.447 486.33 310.985 cv479.62 314.723 473.295 317.257 463.403 320.049 cv460.441 320.886 456.381 322.087 453.738 322.994 cv450.013 322.894 430.529 322.317 419.147 322.317 cv407.771 322.317 384.313 323.977 376.863 325.867 cv373.473 326.723 372.633 328.082 368.705 328.082 cv361.36 328.082 351.718 324.355 345.801 321.484 cv344.945 321.74 342.81 322.685 340.665 323.751 cv336.465 325.839 327.125 338.802 321.686 334.875 cv318.92 340.566 306.94 345.951 302.84 351.847 cv303.292 348.756 308.126 328.742 308.577 324.744 cv308.66 324.031 308.73 323.458 308.278 322.703 cv303.899 315.408 291.687 310.762 284.794 309.414 cv282.772 309.015 281.772 308.734 280.415 308.431 cv269.541 305.148 li259.457 308.431 li271.094 310.663 li256.326 320.441 li258.892 319.455 274.8 315.042 275.979 314.69 cv277.283 314.298 279.017 313.929 280.909 314.59 cv283.077 315.344 289.217 316.755 292.872 318.021 cv295.021 318.767 298.537 322.703 299.443 324.817 cv299.815 325.687 299.958 327.527 300.197 331.611 cv300.35 334.18 299.686 337.744 299.064 340.525 cv297.441 347.784 294.137 353.455 293.102 355.474 cv291.667 358.266 289.665 359.179 287.706 360.095 cv284.485 361.606 280.554 362.566 276.178 362.616 cv273.176 362.646 271.174 362.483 269.889 360.75 cv265.858 355.314 255.894 350.029 245.724 351.991 cv239.481 348.215 233.292 336.033 233.292 326.328 cv233.292 320.514 236.234 311.343 237.818 306.738 cv247.975 305.374 268.302 297.637 278.19 293.145 cv280.258 293.048 285.946 291.03 291.381 291.03 cv304.673 291.03 317.861 302.658 325.866 310.509 cv327.174 308.348 329.642 305.075 336.438 305.075 cv345.854 305.075 351.24 313.63 353.936 322.426 cv358.84 318.867 li357.983 313.833 355.36 308.318 351.393 304.354 cv348.146 301.11 341.957 298.417 337.125 298.417 cv334.2 298.417 331.182 299.072 329.27 299.072 cv322.553 299.072 319.807 296.077 314.846 292.653 cv309.487 288.955 299.513 283.582 292.388 283.582 cv287.809 283.582 285.744 285.375 281.968 285.392 cv276.407 285.418 274.348 283.111 271.675 279.791 cv270.517 278.343 264.882 273.346 263.371 271.333 cv262.508 270.181 260.978 265.46 260.419 263.096 cv262.033 264.822 263.594 266.731 265.612 268.262 cv267.565 269.74 270.022 271.035 272.333 272.339 cv275.6 274.186 279.309 276.304 282.978 277.476 cv286.195 278.446 290.382 278.847 294.303 278.847 cv299.892 278.847 306.485 277.692 311.951 280.245 cv315.606 281.949 315.852 285.82 318.768 286.952 cv323.3 288.715 335.884 289.117 342.863 289.117 cv356.679 289.117 371.633 287.367 380.465 285.252 cv376.156 280.511 li370.04 281.49 352.11 283.439 343.882 283.439 cv332.291 283.439 321.341 281.59 321.341 276.795 cv321.341 273.475 324.913 268.677 331.707 268.677 cv339.008 268.677 350.035 273.097 352.077 273.698 cv354.112 274.302 354.945 274.152 356.23 273.548 cv360.504 271.35 li354.839 268.707 335.087 261.92 328.214 261.92 cv324.966 261.92 323.2 262.389 321.085 265.104 cv318.442 268.504 311.393 271.603 300.141 271.603 cv293.971 271.603 285.139 270.494 283.207 269.7 cv279.82 268.305 273.183 264.454 268.936 261.393 cv263.464 257.448 258.703 253.068 255.419 247.949 cv254.393 246.348 253.975 244.628 253.991 243.044 cv254.005 241.709 254.373 240.475 254.513 239.492 cv255.485 240.856 256.548 241.833 257.906 243.107 cv263.843 248.898 272.612 253.234 281.63 254.968 cv284.203 255.459 286.484 255.844 289.018 255.844 cv292.869 255.844 296.415 253.779 298.683 251.767 cv295.137 247.65 li294.001 247.992 291.634 247.992 290.073 247.992 cv276.984 247.992 260.373 239.432 256.551 229.524 cv256.176 228.551 255.721 228.017 256.097 227.11 cv256.475 226.201 256.95 224.281 257.229 222.501 cv257.996 223.385 259.583 224.716 261.592 226.004 cv266.456 229.129 275.726 233.442 277.542 234.587 cv282.221 233.243 285.737 231.663 288.516 230.221 cv291.229 228.81 294.954 227.535 299.264 227.535 cv308.83 227.535 319.827 232.991 330.146 238.074 cv337.192 235.305 li328.034 228.863 308.096 219.849 297.022 219.849 cv290.475 219.849 284.336 224.633 279.956 224.633 cv274.591 224.633 259.194 217.129 259.194 210.874 cv259.194 206.069 269.152 203.34 285.176 201.368 cv282.413 205.462 279.777 209.685 277.32 214.048 cv281.394 216.313 li306.485 179.982 332.586 156.384 354.541 142.011 cv362.516 136.791 364.332 133.733 367.125 128.029 cv373.918 114.137 380.336 103.449 391.492 103.449 cv396.702 103.449 400.958 106.371 403.874 109.993 cv411.955 112.41 li403.774 117.948 li412.131 121.269 li401.228 124.33 386.333 134.938 380.293 150.494 cv368.675 151.118 363.063 160.521 359.269 168.404 cv356.708 173.72 352.628 175.838 346.688 179.866 cv299.164 212.989 li305.712 213.896 li349.606 184.498 li358.266 178.657 362.38 174.351 364.458 170.2 cv368.532 162.062 372.918 156.006 381.524 156.006 cv385.755 156.006 390.284 157.815 393.906 161.239 cv401.612 163.755 li393.206 168.892 li400.251 173.222 li380.11 179.527 367.629 193.96 360.381 221.549 cv365.717 222.754 li368.386 213.623 371.029 205.246 375.747 197.845 cv387.415 197.712 399.229 197.284 410.823 197.284 cv441.758 197.284 467.447 198.592 481.313 202.676 cv486.938 211.741 493.625 220.619 499.552 227.635 cv493.887 239.87 li491.775 237.227 481.881 223.713 478.863 219.178 cv475.842 214.649 471.917 209.818 465.572 209.818 cv457.723 209.818 455 218.5 454.398 226.43 cv459.605 224.162 li460.816 219.258 463.23 216.688 465.572 216.688 cv467.232 216.688 469.271 219.105 469.271 220.915 cv468.514 223.033 467.158 227.413 466.475 230.813 cv471.615 232.545 li471.615 230.055 472.67 225.523 474.105 223.182 cv474.105 223.182 475.539 224.391 476.07 225.374 cv476.412 226.015 478.939 229.876 481.881 235.039 cv484.504 239.634 487.416 245.309 490.115 249.838 cv491.404 252.009 492.888 253.972 493.887 255.502 cv495.209 257.518 496.397 258.945 497.666 259.653 cv498.845 260.32 500.109 260.336 501.139 260.336 cv504.463 260.336 505.993 259.238 508.238 257.312 cv512.461 253.686 516.087 248.632 519.865 244.1 cv520.406 244.26 521.752 244.854 523.574 245.697 cv523.379 257.046 519.234 266.698 515.356 272.708 cvcp467.687 148.957 mo460.521 139.228 440.052 143.824 440.052 143.824 cv447.602 133.249 li434.537 134.835 li440.576 127.587 li441.865 125.698 442.164 124.566 442.691 122.756 cv445.258 113.466 451.979 104.252 464.765 104.252 cv480.268 104.252 484.7 116.135 495.475 125.598 cv506.404 135.201 529.275 153.648 550.22 177.501 cv567.107 196.733 588.748 241.434 605.37 276.722 cv587.195 267.887 556.408 237.486 543.525 214.699 cv537.437 213.999 li551.282 240.215 580.986 270.746 610.374 287.364 cv615.713 298.729 620.338 308.547 623.844 315.38 cv599.68 302.392 562.538 270.065 542.291 247.726 cv524.773 228.395 500.913 191.546 492.755 170.702 cv489.75 163.021 483.535 165.631 486.715 173.421 cv494.412 192.273 512.156 219.995 530.696 242.838 cv526.377 240.936 521.008 238.37 518.129 237.078 cv517.149 238.688 514.702 241.875 512.182 244.499 cv509.283 247.527 506.295 249.96 505.365 250.821 cv503.33 252.71 501.816 252.859 500.461 250.744 cv499.82 249.751 498.492 247.949 497.815 244.854 cv506.654 226.28 li502.142 222.266 488.661 204.177 483.09 194.113 cv470.423 171.223 475.406 159.442 467.687 148.957 cvcp560.221 137.953 mo564.554 131.007 568.591 122.593 570.102 112.726 cv578.563 113.718 li575.049 120.163 571.068 130.174 570.763 136.725 cv570.984 141.177 571.845 141.967 574.133 143.671 cv578.389 146.842 583.648 144.707 588.669 140.423 cv594.197 135.708 599.633 127.816 605.147 120.665 cv612.297 126.604 li603.232 132.192 600.665 138.159 603.435 142.11 cv604.51 143.654 606.841 144.806 609.727 144.879 cv612.602 144.953 615.995 144.123 619.697 143.239 cv622.307 142.618 625.133 141.705 627.746 140.902 cv627.746 150.417 li607.13 151.878 571.98 160.199 558.666 177.933 cv552.952 170.223 546.76 163.858 540.697 157.663 cv547.859 152.689 554.825 146.613 560.221 137.953 cvcp608.963 173.74 mo607.857 181.087 li600.134 177.196 586.501 173.248 572.897 172.969 cv577.742 169.496 583.473 166.661 589.525 164.379 cv593.238 168.869 602.007 172.816 608.963 173.74 cvcp610.782 342.863 mo611.788 345.984 610.782 347.796 606.047 347.597 cv601.319 347.395 599.609 346.111 598.533 342.06 cv587.434 297.202 li591.209 300.107 594.994 302.929 598.76 305.632 cv610.782 342.863 licp589.838 354.747 mo586.922 358.472 583.297 359.172 582.387 354.949 cv570.045 283.047 li573.707 286.205 577.423 289.287 581.168 292.288 cv592.76 345.078 li593.869 350.015 592.76 351.021 589.838 354.747 cvcp522.319 293.483 mo522.734 292.919 522.887 292.69 522.887 292.238 cv522.887 291.783 522.773 277.323 522.773 277.323 cv522.773 277.323 527.851 271.679 529.793 269.733 cv529.986 269.547 529.992 269.295 529.966 269.109 cv529.093 266.207 528.219 257.219 528.717 248.098 cv532.031 249.645 535.776 251.372 539.106 252.783 cv546.674 261.353 555.127 269.74 564.016 277.742 cv577.655 360.278 li578.762 367.443 584.189 368.446 587.922 364.627 cv592.148 360.294 595.682 355.347 598.5 353.538 cv601.319 351.725 605.951 352.933 611.084 352.933 cv616.221 352.933 619.14 351.927 616.221 343.371 cv604.846 309.922 li615.285 317.14 625.435 323.443 634.648 328.516 cv633.835 326.168 632.896 323.071 631.58 320.013 cv618.018 288.47 587.344 219.577 562.654 183.531 cv563.816 181.645 565.207 179.869 566.798 178.208 cv585.249 178.561 596.996 182.286 612.217 188.674 cv615.234 169.267 li609.209 168.44 599.705 166.724 596.398 162.052 cv610.311 157.835 624.754 156.242 633.284 156.358 cv633.284 132.445 li629.479 134.663 624.688 136.754 620.166 138.143 cv614.637 139.842 609.6 140.57 608.216 138.132 cv606.698 135.463 614.328 130.695 622.184 126.531 cv604.49 111.855 li601.808 115.448 595.721 125.522 589.499 132.196 cv585.093 136.924 580.547 140.025 577.957 138.083 cv576.604 137.067 576.55 134.102 577.672 130.37 cv579.824 123.214 585.491 113.253 588.935 108.884 cv564.467 106.57 li564.464 116.554 559.772 127.541 553.995 136.422 cv549.018 144.073 541.779 149.621 535.996 153.034 cv524.135 141.563 510.828 130.087 500.681 121.913 cv491.736 114.708 485.377 98.1128 464.867 98.1128 cv446.394 98.1128 440.075 110.657 438.01 117.998 cv436.652 122.829 436.047 124.493 434.763 126.302 cv423.031 140.248 li436.877 139.142 li429.855 150.77 li433.879 149.93 458.16 145.059 463.154 152.881 cv469.204 162.357 465.074 172.634 476.402 194.163 cv461.577 191.643 440.059 190.334 410.823 190.334 cv401.025 190.334 391.094 190.7 381.232 190.806 cv387.594 184.069 396.758 178.401 410.873 174.025 cv400.855 168.513 li411.982 162.348 li396.828 156.709 li394.182 154.333 390.885 152.141 386.734 151.098 cv391.588 136.187 408.117 127.478 423.965 121.471 cv412.862 116.939 li424.058 110.813 li406.822 105.311 li402.313 100.025 397.987 97.6079 391.339 97.6079 cv375.352 97.6079 368.632 111.494 362.29 123.802 cv358.95 130.28 356.848 133.009 351.17 136.725 cv338.872 144.767 323.2 157.062 308.232 172.813 cv300.419 167.175 284.442 150.7 280.112 141.705 cv278.399 143.824 276.712 148.429 276.712 148.429 cv278.343 150.155 297.159 169.158 304.155 177.212 cv303.624 177.797 303.099 178.391 302.574 178.986 cv295.113 180.463 275.756 182.319 269.162 181.426 cv265.46 187.994 li270.384 187.512 289.625 185.245 297.61 184.78 cv295.183 187.708 292.813 190.74 290.501 193.851 cv265.755 196.669 249.224 201.74 249.224 210.874 cv249.224 212.385 249.828 214.095 249.828 215.708 cv249.828 219.53 248.396 220.944 245.677 222.654 cv243.904 223.77 243.792 224.541 244.542 225.596 cv245.309 226.668 249.124 232.32 249.124 233.429 cv249.124 235.265 247.301 237.091 245.827 238.735 cv244.542 240.176 244.595 240.551 245.604 242.364 cv252.776 257.617 li253.683 262.143 252.929 267.157 257.003 272.041 cv258.438 273.754 266.363 284.187 272.101 289.572 cv264.298 292.64 248.692 298.985 237.47 300.393 cv235.215 300.678 232.685 302.255 230.57 303.46 cv229.162 305.872 227.711 310.155 227.1 315.002 cv226.665 318.462 226.722 322.32 226.722 326.251 cv226.722 329.711 228.555 340.615 232.429 347.923 cv236.311 355.234 240.033 358.511 244.615 360.65 cv245.521 360.248 247.517 359.946 250.638 359.879 cv259.111 359.694 265.759 364.375 268.681 368.4 cv269.796 369.947 272.051 370.25 275.002 370.25 cv281.849 370.25 289.366 368.001 296.518 365.279 cv298.052 364.023 302.355 361.152 306.588 357.834 cv310.815 354.511 334.376 334.526 344.795 329.489 cv350.28 332.46 359.292 336.286 368.608 336.286 cv369.143 336.286 370.936 336.312 372.835 335.884 cv375.747 335.226 379.466 333.931 384.161 333.015 cv392.564 331.372 402.416 329.93 405.288 329.977 cv413.011 330.107 435.662 330.684 441.031 330.684 cv446.669 330.684 454.694 330.193 457.766 329.89 cv462.497 328.333 473.065 325.412 483.186 320.73 cv493.283 316.257 514.55 301.501 518.025 298.132 cv519.706 296.618 521.213 294.967 522.319 293.483 cvcpef404.65 251.973 mo401.935 247.088 li399.896 247.842 392.9 249.814 385.386 251.471 cv379.161 252.846 372.849 254.084 369.565 254.084 cv366.896 254.084 363.731 253.875 360.905 253.019 cv356.124 251.568 351.824 250.07 351.824 246.219 cv351.824 243.563 352.96 241.687 356.174 240.395 cv361.394 238.293 369.525 238.429 373.795 238.429 cv374.599 237.576 377.826 233.685 377.826 233.685 cv375.711 233.229 371.657 232.625 367.427 232.625 cv362.058 232.625 357.12 233.309 353.017 235.029 cv349.201 236.626 346.207 238.931 344.038 242.055 cv343.178 243.297 342.278 244.472 340.97 244.472 cv338.802 244.472 335.027 242.709 331.103 242.709 cv329.393 242.709 327.932 243.061 326.421 243.061 cv322.443 243.061 317.257 240.172 312.642 237.712 cv309.726 236.162 306.731 234.707 303.262 234.707 cv301.82 234.707 299.832 235.066 298.085 235.796 cv294.705 237.21 291.278 239.485 289.552 240.933 cv292.646 243.048 li294.453 242.105 297.733 240.833 302.388 240.833 cv306.336 240.833 307.913 242.105 310.091 243.423 cv311.629 244.359 312.821 245.395 313.966 246.421 cv316.403 248.599 315.703 250.598 313.79 252.109 cv312.808 252.882 311.974 253.822 309.487 255.429 cv308.282 256.206 306.217 257.481 304.802 258.072 cv302.335 259.105 301.25 259.221 300.343 259.221 cv299.437 259.221 297.979 259.075 297.172 258.265 cv290.857 262.123 li292.743 263.601 294.904 264.105 298.53 264.105 cv302.611 264.105 305.885 263.222 309.905 261.635 cv315.142 259.573 321.028 255.519 322.981 254.407 cv326.958 252.129 331.009 250.648 335.309 250.648 cv339.138 250.648 343.421 252.906 348.219 255.193 cv353.903 257.903 360.822 260.579 367.197 260.579 cv371.016 260.579 375.296 260.011 379.781 259.102 cv387.727 257.484 396.29 254.802 404.65 251.973 cvcpef380.545 245.538 mo386.077 240.846 394.381 238.164 400.151 238.164 cv402.273 238.164 408.452 239.103 415.578 239.791 cv419.619 240.176 423.958 240.478 428.042 240.478 cv436.067 240.478 444.826 236.669 452.586 232.698 cv451.075 227.19 li447.446 229.166 440.55 231.383 434.806 232.29 cv433.388 232.519 429.294 232.576 428.111 232.39 cv426.183 232.087 423.855 231.39 421.365 230.932 cv417.849 230.274 414.014 230.122 411.75 230.025 cv409.246 229.913 404.753 230.344 402.539 230.474 cv394.424 230.965 389.065 232.871 383.942 236.324 cv381.342 238.077 378.035 240.949 375.481 244.402 cv376.793 244.502 380.545 245.538 380.545 245.538 cvcpef417.265 272.964 mo418.337 274.876 420.333 278.034 424.715 278.034 cv426.704 278.034 429.457 277.237 432.548 275.776 cv436.469 273.92 443.479 270.351 447.795 268.08 cv451.627 266.071 460.18 262.04 462.447 260.934 cv461.641 263.149 459.023 267.777 457.41 270.145 cv456.753 271.114 455.933 272.11 454.615 273.316 cv452.845 274.929 450.357 276.852 447.795 278.754 cv442.386 282.765 436.217 287.108 430.157 290.542 cv432.195 294.24 li436.131 292.438 440.006 290.18 443.863 287.965 cv448.811 285.123 453.482 282.333 457.311 279.614 cv460.811 277.127 463.5 274.641 465.163 272.761 cv466.073 271.732 466.916 270.297 467.756 268.564 cv469.908 264.145 471.827 257.956 472.969 252.926 cv469.141 250.864 li468.803 251.056 462.826 253.895 460.65 254.865 cv454.957 257.398 448.232 260.35 446.168 261.27 cv444.245 262.123 440.55 263.896 436.867 265.52 cv433.59 266.964 430.333 268.468 428.344 268.468 cv422.909 268.468 419.124 263.298 417.211 258.467 cv413.034 259.875 405.786 260.629 399.441 261.635 cv393.096 262.644 377.646 267.777 367.529 272.897 cv374.824 276.238 li382.222 271.101 394.66 267.359 403.721 267.479 cv411.523 267.578 414.492 268.03 417.265 272.964 cvcpef430.961 247.929 mo428.182 247.929 421.471 247.175 418.749 247.175 cv417.092 247.175 415.83 247.59 415.83 247.59 cv416.332 249.154 417.394 253.463 417.394 253.463 cv419.904 253.786 424.287 255.127 432.372 255.127 cv438.504 255.127 442.611 254.304 445.936 253.079 cv449.256 251.853 451.789 250.375 453.642 248.862 cv455.385 247.437 456.508 245.983 458.37 245.027 cv460.02 244.173 462.357 243.964 464.964 243.964 cv468.689 243.964 472.913 245.126 475.994 246.823 cv476.439 241.099 li474.377 240.093 467.158 237.559 460.863 237.559 cv453.729 237.559 451.029 239.482 448.402 241.853 cv445.321 244.631 441.453 247.929 430.961 247.929 cvcpef475.084 269.962 mo473.912 270.59 471.535 272.462 469.609 274.534 cv464.629 279.893 459.476 286.833 453.264 292.806 cv447.311 298.537 436.974 303.062 426.887 306.17 cv425.672 304.862 413.788 287.889 412.277 285.471 cv411.729 284.591 411.623 283.735 409.711 283.735 cv408.452 283.735 405.869 284.246 403.329 285.172 cv395.337 288.071 379.224 295.977 377.799 296.608 cv375.986 297.415 373.765 298.387 371.085 298.387 cv366.63 298.387 360.225 296.435 355.795 294.722 cv350.961 296.724 li355.377 299.404 366.397 303.415 371.009 304.497 cv375.352 305.519 377.241 305.141 379.659 303.856 cv384.563 301.256 395.932 295.1 399.594 293.855 cv403.548 292.51 404.953 292.759 406.394 293.739 cv407.559 294.533 410.408 297.069 411.676 298.537 cv414.034 301.266 415.584 303.81 416.468 306.502 cv417.022 308.179 416.713 309.268 414.851 309.746 cv412.626 310.314 405.889 312.06 395.42 312.06 cv390.991 312.06 389.145 311.785 384.413 310.882 cv389.779 316.49 li391.831 316.865 395.925 316.838 400.251 316.895 cv406.344 316.974 413.038 317.007 417.852 316.742 cv419.645 316.57 421.076 316.35 421.953 316.087 cv428.042 314.251 446.168 306.923 457.291 302.395 cv460.313 303 473.172 305.592 479.012 306.699 cv482.033 305.869 487.121 304.088 491.172 301.339 cv494.82 298.855 497.686 295.542 500.176 292.294 cv496.796 290.276 li492.845 293.825 485.633 300.13 475.563 300.13 cv469.523 300.13 465.721 298.019 462.252 295.602 cv464.021 294.194 468.45 286.952 472.508 281.663 cv474.327 279.292 476.236 277.373 477.505 276.42 cv480.493 274.172 487.141 272.947 499.023 272.947 cv503.028 267.286 li496.277 266.984 480.24 267.223 475.084 269.962 cvcpef382.478 170.572 mo384.759 170.572 386.604 168.726 386.604 166.445 cv386.604 164.164 384.759 162.314 382.478 162.314 cv380.196 162.314 378.347 164.164 378.347 166.445 cv378.347 168.726 380.196 170.572 382.478 170.572 cvcpef534.959 403.718 mo526.041 403.718 li522.711 403.718 520.021 406.427 520.021 409.757 cv520.025 503.039 li520.025 506.372 522.715 509.075 526.045 509.075 cv534.963 509.075 li538.297 509.075 540.982 506.362 540.982 503.032 cv540.982 409.75 li540.982 406.417 538.293 403.718 534.959 403.718 cvcpef555.818 408.379 mo553.597 408.625 552.354 410.395 552.354 412.228 cv552.354 416.664 li552.354 418.5 553.852 419.98 555.688 419.98 cv617.221 419.977 li620.029 419.977 622.304 417.709 622.304 414.904 cv622.304 407.4 li622.304 404.591 620 402.05 617.211 402.324 cv617.211 402.324 557.733 408.16 555.818 408.379 cvcpef511.581 432.551 mo498.018 432.554 li498.015 409.621 li498.015 406.375 495.395 403.724 492.141 403.724 cv483.448 403.724 li480.197 403.724 477.574 406.357 477.574 409.605 cv477.584 432.554 li473.209 432.548 li470.874 432.548 468.972 434.423 468.972 436.765 cv468.972 443.01 li468.972 445.344 470.864 447.227 473.201 447.227 cv477.584 447.227 li477.598 484.55 li477.598 497.473 487.23 509.082 502.533 509.082 cv510.718 509.082 li513.252 509.082 515.307 507.039 515.307 504.505 cv515.307 497.719 li515.307 495.182 513.244 493.147 510.708 493.147 cv509.479 493.154 li502.135 493.154 498.031 488.529 498.031 481.749 cv498.018 447.227 li511.592 447.227 li513.926 447.227 515.818 445.344 515.818 443.01 cv515.818 436.765 li515.818 434.427 513.916 432.551 511.581 432.551 cvcpef341.498 461.132 mo342.298 452.333 350.048 445.833 359.182 445.833 cv368.316 445.833 376.202 452.333 377.002 461.129 cv341.498 461.132 licp359.182 429.865 mo334.439 429.865 320.561 449.226 320.561 469.636 cv320.561 491.38 335.425 510.529 359.348 510.529 cv375.717 510.529 391.861 501.9 394.905 487.738 cv395.32 485.826 394.032 483.316 391.339 483.309 cv379.642 483.309 li377.517 483.309 375.784 484.328 374.738 485.859 cv371.391 490.766 366.48 493.382 359.232 493.382 cv348.985 493.382 341.887 485.301 341.349 476.353 cv391.097 476.353 li395.679 476.353 397.728 473.866 397.728 469.636 cv397.728 449.738 385.951 429.865 359.182 429.865 cvcpef568.203 461.132 mo569.006 452.333 576.756 445.833 585.89 445.833 cv595.027 445.833 602.906 452.333 603.713 461.129 cv568.203 461.132 licp585.89 429.865 mo561.144 429.865 547.265 449.226 547.265 469.636 cv547.265 491.38 562.133 510.529 586.053 510.529 cv602.425 510.529 618.564 501.9 621.613 487.738 cv622.025 485.826 620.736 483.316 618.047 483.309 cv606.35 483.309 li604.221 483.309 602.484 484.328 601.442 485.859 cv598.096 490.766 593.191 493.382 585.939 493.382 cv575.693 493.382 568.591 485.301 568.053 476.353 cv617.805 476.353 li622.383 476.353 624.432 473.866 624.432 469.636 cv624.432 449.738 612.654 429.865 585.89 429.865 cvcpef460.857 420.499 mo463.36 420.499 465.386 418.48 465.386 415.976 cv465.386 409.279 li465.386 406.776 463.351 404.763 460.85 404.763 cv299.695 404.763 li296.026 404.763 293.071 407.732 293.071 411.398 cv293.623 474.686 li293.623 474.686 258.896 411.965 257.089 408.765 cv255.386 405.756 251.73 402.984 246.67 402.984 cv233.419 402.984 li229.75 402.984 226.788 405.956 226.788 409.621 cv226.792 502.434 li226.792 506.099 229.756 509.072 233.422 509.072 cv241.922 509.072 li245.588 509.072 248.543 506.083 248.543 502.42 cv248.008 437.353 li248.008 437.353 283.071 500.705 284.571 503.198 cv286.597 506.571 290.02 509.072 294.98 509.072 cv307.153 509.075 li310.818 509.075 313.78 506.099 313.78 502.434 cv313.777 420.492 li460.857 420.499 licpef449.896 463.712 mo445.191 462.517 433.879 459.642 431.426 459.004 cv427.036 457.873 422.942 456.441 422.942 452.685 cv422.942 446.995 428.205 445.059 434.766 445.059 cv441.771 445.059 447.015 447.602 448.9 451.992 cv449.807 454.103 451.561 454.508 453.977 454.508 cv463.609 454.508 li465.203 454.508 467.033 453.14 467.033 451.058 cv467.033 439.856 453.678 429.855 434.756 429.855 cv415.183 429.855 402.333 439.179 402.333 454.024 cv402.333 465.386 411.311 472.153 422.348 475.039 cv427.381 476.353 435.971 478.471 440.151 479.57 cv444.664 480.752 448.697 482.133 448.697 485.996 cv448.697 492.091 442.267 494.164 435.254 494.164 cv428.604 494.164 421.979 491.195 420.08 486.453 cv418.981 483.708 417.055 483.309 414.133 483.309 cv404.338 483.309 li402.628 483.309 400.66 484.777 400.66 487.007 cv400.66 488.266 li400.66 499.111 415.203 510.462 435.271 510.462 cv449.498 510.462 469.32 504.545 469.32 485.467 cv469.32 474.42 461.926 466.767 449.896 463.712 cvcpef%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 12.0.0%%For: (wdc) (rock)%%Title: (FreeVector-Nestle-Logo.eps)%%CreationDate: 4/4/11 1:26 PM%AI9_DataStream%Gb!R&ks?=`Ou@W(J:!@oChuA>26.(gNBgm(Z&K4L=!7^f('k:m]ANGS?2KI+,'))Jd^,I8mn?Nhi?9_<aNW9l,'/'VV13Kjh`Wu)%l2Pgu(=@WS/?.`rR@9^rhL4-=S+-0^?C$kM6?t^CZAM74qsB=%cH5nUT\o1-SZVU4rP@/RD>!AK8aU*TOT*\.IHpHNrI<<tHEHo0%WThDlraWXrl`Bgca0"s%WCObP+8kB81\uhia3Og*S@!VZqjhU#\?iqi9Rf7D+,V0<o1nKHS@V6C`mgF,Q_.Tc?C[S\O1>;nofk6>%hKBC@BBOouH+/:om/`JhC`$l,VfUQ)S19^uB'>;`B'5h0d6!]/e9i_Anbb\4C7)-:4p>oF*uQ8a1`#>*[.2QFp-8.'rneM2rs:n;%[Bu6>1Y^YY1m,l:9iT;VqJ2hej%J[05pnt7h9PP)YBA^\H-DG]:1%)"?5,ghnuJ(Sal0OFRafe;/#]m9X!]5DC.2).KHKclMWGMd%$9EZZ49&EUWGcuVcMM6E6K@HN>:.'=38a!"#L+s+V+OgPO[$Rnk]I*u::fUVd0*8l?bbsrGBsU9($iOKVECXms!n7r>D'i=3A'0<%mfN)JNCE]A<u8n]XhQr"TrBm<qQt=LgOIP?ShIF=aWp'^;2/[8MN_40'<>&FLg%X5C6b^tTA+[MKPI+8VR?5Gcop`e/7:5rUe\F^%L&5]5h=p6D88>"!_aCAh_1+!4?g0'Mqu"*J_J?ii&LTeD?i#)CW;^gm>$a;D?gSqF12*:RYL'R>TtT.F+3NKrchnUUr8L\q_8$"p%eYghPF&_>P/,i3;A%QqNIsO$:?^u#(*;$.@)Z0KH:2RUcIRJOoF0^;hTVe+S>*CTFh<P!i&ZjjSSj'Zi^>/h@b[Ko3hQK\DG1_`T%rhl<FmWn!lMK[\re"F-)\2ZRMmIpE?f>$9/\S`n@.*DSYBOdMr3-forPTFa7$]MM^)ruKS.ocB9(?ghZRqlAJom5H360n0AgRcp1%KYP-bjDY&bA$j8]*WJ;&CB+#4bOY,^]md/3G3i:?J8D\!kM:<bZh*qEH0=u!g.2:.N"3qKkh=-cSR2=QkbLRL-i::^Xhj7%<F_I-%\gRB^6[1hB1A6c)TlJS*N`r>$mdBnu3g\X4_(tGd:0N8gj/u"Y+'QFtc\>Sc@'7rU#;O5[p!(fibnL-=%k@A_Uu2"*4jm^Z]f>9V%j+Mo]/POE:;.\eBKA*)%XlE/nDX,VEQc+'f(5Ze0VlY:G9g?=^ZI83\Ph,q"r_:.DdLX(uqF<-<]rZYX(=i*brV1OC;X<BBe0C[.%i`,:W2,!tm*Ma;CmThoom8f8n:PV$:]f1)%SqSef9oWjog[2!-("\8DlX-@D(0)06D/9Vci'0"tE?p$sNIu!F+,-\g&b(t+[BEU[%C:;Dl;q!rPg#$L%nQWI3C:"1pbO6N[DS75WBAt!LCGYuQm[_^skD:&e\pG7V*>5r).,#LH>6!JZn_[/m:o\rnmHkEF-W2:j4k_%$%\A.$qo=r*GnCO(T-YG[CC(8H(Bn,JGmA)';(&b2`]<GjtT3Y@_K_C]Ge"3'=rUt^iF\_c\SJr-;f5L]Wm,*IO[cH5YG?fK#[Qidk%N/\SXl*@L;&D)sr/H+H_rVo;Y`)fjr7cWsGp3N:!/Gs9rp#!F0gMF_+:Moe)S%.+f?T0#GMV`_0s3IgbKsMQE(<AVl@Q.SQs5X!.%I5_+@](5lV?$^\`O8m2Iptr^nc?e=?s6[ID5#:KEPbtiYD`b)Xj^\8d-F<UD^RP$gf+$c42d3$WmU;KaWlIPr>W8+H:A=8A-7mK.%r:c5p*A(MPY((Qfc];s!/1pYc*>PiAQ%&ajiU$6`8_)MZ*1Vqnpa.4)s5nf^gh2ANe%Za,4+(l:D\r<sT)RPO3:<<Gp.5ekYP+af%0D=GO^,d<QZFYY)6S#[O&]_<H60G=*po@?JmJQRg[^P'VDs_[oh=JB%O6)CB=m,211PXUalf@Q0FkE[1pJ9bAS"$Vu;n)^$>Pn<#%:?fQ6lg4@:T?^4/k9Hg,]rnO7_J[Wsdr&Ha>`j3E2fJk:Ct'@>kPa,hf%G=]d/=JJ[4a0pqq[1jRQj==(=7!J&G::F1CuU<f=ZYP%%?]&$\G#fQ%.4&5H0nG`Q<+df;D25:S_>,[;ts=F8Wc*Ff%?p900<f:DBNt%l+8TUUs[O*Y:n0sWVrm4$+a*d:0XVQ_R&\#7Bbg2%,];nJgA.CaEd$02p"TJ87b6Cndf7]4hGYiS)P$9h>D)lX)i&f%77if0Q^4Ts1k*'>Y:Y&[kh%J/D:sJ_GF1Kgo?0eH5mOPE)Kaok%ZE=;gNf.WWDG?\U^"<:b1H:*'nSI9=hi3W_epu<k:$!8*l1Dr_S"[\X5?.*%VgeWK:A^PBZIeBL:>2K&CZL\&YBrk^LRn08lM)OJ%^k\8m:ffh#Fk]F@KDn0Gf6Pd>ql3t@2qQGs>$)qT\Z?m[F*cZ+:@7Cqd/RsZ*@PbOF^sf`YHpIE%DNp<$L_6dd10LO':%HaRCa!(%C\i'HSC-mCWjpk,m!&0D\R"UMX8_qaT3&Vt:Q:pqNK#]3d\$8R'JQ(@I=:S-m*^[0pD7$Uk;Le9YNJuQ#LAEk((O,XD6DcbS%6;f%D:Qu#RWm*0bajILGL)knbapG'ID,Z$H#V.`f%6(Oj`I#(GG=<&q5\d#(YrA'r*Fl_]JOhY[X@cmGr.Cl]XW*"?jghCY8f`UZaIH1%F`pftO.WeKp%nX)Z)4u'5>cbrF+&A.q#'Kkq<Qd-p3D+iESTG4CM`@-+3cu(G:qI9g"d/h^O#W=9MIGVU<UB.Q/+$lKAuj!04,[1%X7c4R2]@udppRj-Hi;^i_HHh^[Q-9pYs.bqs'TT1M7*?Sa6SZG_7'ro8oM97ET(<ek^<'%p`'g,j6+*f45Th?]_(jq#H<KiI(&nM%n9^dV](`,5Z+k9oA\S(b\$7`=k=#19Z*f'92-p0LR;K.8o/AJ+8(isBV8dV'Dg(6mgs=[8ebegd=$%3/T=j'oF0sS;[smA8md/ZD%erd<Z7upimTR6Fr6MLB>r^q,*l2CFom+708f$:rnkl6:s`Qb0"C>(5Qs0g]BC#;.HIJe-U;/uO,EOR>;SK4Mc6$jiJrOicS)V`N]%ZhHkridRg#O@K*Th:5"IRc!o%j-f_Rc:Y:m5*ce.g6u>Sh,q8[@;W0icY-WC^6guXMUh_#fqnH??P\g<45[R%-R[A"TI8m\*DFQk%o>/("!M,g`r-i&9F_SSIhhpE3G@!0L[?g6_hjXL+5V!%gps-9dOf@SYn+K5j5L2Mr?dbR45-2GZii@-95Gb[H;mJ\^pL?&WjN6+\%dX6B9=R5ePG\M0tf;n@&PHMf&hs6P4>G4A6S#ukNHjAZ!a)=hRP;/B\>&!tD;E$[M:G_Uqr+\06S%iR)#EN3h=_kG5hd%s`n(oTY%DuP"0fKEuA2n&1`?T*(kP\.[-I/A#@^=iP!p@7=p$V)CD[6r.0qeohEfrGXTgBmc,D]\8Hm5$o)g=Co0-[-=ja:+d)WTgf4na-.<%m,R7)nmHG//mESri@3)LR<Jmj-L]pKlq5%h5"`uVJVS?VFHVJL<E%A)Z]?bOesj?t-/-QZkauKb=6b'?pA2sj]B?XB]:7t"j.mZ_%aaif&i]doj!S\nap8?baN7-tMD:Md]\TdmXouOfE]XAV.4`#9GK=RqerHQ_47*+>CZ1Y3g@l*8t[P\#**BWp_]t*[6BZ]+t#q^B#%*5?1"rk@rDIJ%!SN8bY#qs1<[a.J`E:7-ZH.m<M!K<O%"Da"*4npL2Wj,lN!9iE]+YFEje:Nrb:2bW'_BlpTKTg.Dgd;j+#C$toP%l0Z0aRU+-DNDO/*j/da7g-+a?E6J&1gW>(0)peJ](-;ouNbKlUI=UGPEq]%ck=s^piE,#K.K+C8lf#2A+8a*<SY)Cr8)<P*RT+6F%s1)k1^?cpo^Ydj\Xfn".5#+g*]UV]J.PM+<'eO@Uf7,omFeiA75GPVE.G;onQf^IpIF]g\h`>O@:G)u]DJejiQb/7E\Yif1LLA>)%e'+8u^X)X\0$W5:IVeB=hO=nK:E8b-XPH+oro3)%G]rKQa6-Kr4M99.BV_2Lo=Mccm-EQ\NgcGiLHihoT)3+`e6`p7KAD)mDEdj*%o5+9VAeqLu>u'qA509tFMtKR:b5lJLrBF9Bod<p,:P6F1=;DfnD_nU];jdl+o5b.>F62Ms)98Ob(EO%:DA@*)m8pZNQ^?s/eM[8W%c*cE458EtZl4[RK6eM5BEQdhj.Hs$$?$.7[:YYf,qq@<>GQ4bIj.EgUVeM&''t:K_2UiEW$L6SNRc@ECcMK792f3K/9<2<U['J\G%q8@Dja'qs"WbZ0m!f7h^27g`5&W3:%eYbcA0B;M^JN`^,1gK!N8&[DS,S5:9Ej[b%=Mfp+C2.ZN&L5aIXn[`tk(pG1YU>H+_rQnV%q-R4YE7[VV+K`/a*#Zp/VM)^LT@Sc:%=[D>-81>DQc7P&W;KO2>I3,-V8O!mY7-O<)"Z$a6lk-LX6Y3\Nt'Qe,<r^g7XDC)ZDO6&%2p1eFbIi(?XH1]-cu.D,E@mWl<J9f8m'5:ZZ7=K)lq=`F-M7i"$^:LF['K)5E>'FAZXZ5t:Fnk>du@c/='aRah+p+M(u4pgU5D&r%3kGs6GJ:KTH?jHnrO/tP0n"CN@.[$S5FXC"O4TC`lQ\9#o?gEbg-hEGIoaDN+#_lSX2h#XYP]``gW]il,-K#"Gd1`GPG7d/9q[a;%DI1PA+tkMANjQN$/"^W(L$I+Hc[h$redkCq2?@1mcB6KQ]JMI<kg&brq_Q0!Rese#DsP[GF#)09Z1rT[]oas4HImO.F)n2KimZ2p%csL!ac/?k<S`Q^Dic]Bap.de^nW@et"`%4m-*o9Nbf\dNZh&-QCM9MpZ8"uVamPe@p;V`gbrmgK-WD5N05Jd1e'^&);u,+ggD/*f%cVNkFAtQeUrNWqMg%qo9ZHt1'RmgmMUj]m^4^\*!5CJps>^G*<,m#"Xda+c_k'p8h7k7=tG:So5V@%2<r+iW]o'?Icg>D430j0)i%VFmSmIkN:3mW=73`]SA>dAUWm<D?2'AQrbXI;/(ah.\M7X3I]7)HWl;R$oYaII"OZ*kXMfH.:[LZD*fmUJ@$-?`pgRDe(GKpk=6F%=VL8$J#a5lfL2)i?2V5sF7>p\LmE3K-P,Wo?a:#G8>kV/r.CoQ5i/;dqMc:552N.'1X!sSNQ)UT_:;"Dck4_*f,MtpgYHdj2OL'X%*ma]m;#Tgp=9XJ*\Nd_*o>d&p\[(nmpOnRD9KE$Vra<@IaLg&.q$W\6r6.^>hOa5fKNLg,[+Rq@ASo1uIucL;\"4s3(E[PTYL15d%EA&MR)/h:j\nYU>(<_Uh52@QTk3/,#r<9KiHIGYs2g1e[s.VCEG`XJk]2crWRCi@[bN#"KUdO:p]`\(_>O6/Na)a&;eZd^cC'-+Y%:D\MTQ':sCd6Y1OU!A:K:Xb<TV^p(pZAXtrSpP\Dp?]7Ln]``E)qEr+H2!)"CR@<]=VSIY4433^gP\JeqX!4u_GS-$:JFW"qnKaS%824g_QfP*/-2IK9cK`g/>77c5T)JF=<-S;[b3t\'GA!Oa+8?kdJ/S-rniM,EbPu!cg3GlFB'7a7="Cu09"`lkp#SBBe<Mu;kjD;X%Xo8.C4e@Yuf:Z;Ss*h1qJ%bAaK,FNm2e(r<M.taDmeh'GKrgr\lI!ea?Q5q(%=NZb/#Ep5P/#EOQ/-ER5+e`RX:2aRs&Qi+rkV<P%DqGZ0h5M-%ji>\J?h?g'gj\+,+)\GU/)AaN0<;J+c-)a>eXg^Vh)kMpe$k)n02_<$cS7/)_ct<6T!g_()Xh#ib.Z9AHMm^>*7hqY%m.=)uKDM]TkkTIEE#*;<H+)c:eCqcOCTf?1oSIi.;,b*5cQ@Y]Os*V>o).hP`pW-XSS%ifrqu?(X5@29Z2D0HJ*O`1Da2)erj"H6%IsKG?*q^TNWmh=\gO85WaY#\$TBC]eSD&<[Fgi#;]=$]lT,,LCqQp"W7=T=MkO4[pe-Y`X\^@!s6eH:X\pu\'[sE;+5#:IsbjBF`%nauG,hP9:r[#;UfT=YK7%Mu`mHb9%O$nF)&4Cu/!md@1V\9%-+qN($`3IKA(P<47RrL;rQ\de,kF/j.1?g/;DAr.m^ogZl^=diJ7%bZ>U?2\2A_/+X.>dud*9ipt[$o`q+tcUiJ@pY?q"Afnd4[GTb(Y3(,T1qo@q>%?lXHQQo704dM#\psA9W:TtcXeHL,Q0.Pg/_ZKe%hj=AE`/DQodQ;79\*@RIBW`?"5*^N$E6rk"imL.AZ=3_p>"lqnoQI+`J,H1W\G^"1lWX2M]tF/Mj46u54oK/Eq.t-<Qhk*T_i1dn%eaDh:7^q?n)YIP#FDc2;kTRp?UZM4TmoD-]VkJ:4<RJHAqc5h(eB"83gDJL=FlLU48o*hkHLe6/B(<c\TEOR+<\r"FZgAF[gSXsd%qUsIBNK\#D>3ei-iYc*gk[RtAdFIuXX.ukX*c9p!bJr;mjZfI$XZ_#!b3RWr7e(V@Fa;r`T5O0B9fn?j7Xo6r-2I!o/,997H?/',%q85G_9C(uO@'Mh>Cf7AN`N=a6^O@2,,u6HH0+`3f2YEbb\8;"c5LQ]^1Yk"]-ZcmpSU-eaG2GO_]tF!uoMsr-UDHR=Hh[,)MnCE'%nDF_\Yi44H8GW2/qJ,'F+oO4s@qp>'\c"9$YMsA9\Ndk+S2SXOdHJ$KFJS>$+KXZto..5S[$JHN;Em24F&"jn`U<"gI_OWco^h_6%b-1EsDHQXg`u.I)[qBK_&'[D=SC9^oVa"4r0>G8KId[)%ZiBg>c\lOboCKG!^gP%DFSj^8;EKC)(,OaccM<fEoAJKs?C;<>5O`[:%@d!X^d=h0ZCCC8\K36F:Hg@^_eO-9MY=Pj4%+\TH^W_?Eg0VL,*o?_hM2[L`p0-35=DC6"2NLAZraP%rdV`s:I.rbJl191(dpJ[Y%`J-:t!]sj[`G0mMF[5nSG##X1a.LW$a(_jQrUo$Vk/$IWh,fN0OJco"Os!lZeAEpp'g.7Nqh6Ns=Z'O[gS`T&r5U-YaiRab2:m!j%7J6@nGVB%/22H]BEXER3\F[=pSj.$LhO_ArY3d8-GW_r?.[81WY=Y$JDq<VaQHRZ=(7i]u2P8kjCloo_s5P@2@;`9`]S@A,D/S2k%Lb<Bfs*XA5ng^6DbLRU-dt=dqR2=2L^iI"qVs:RsX^&:'Sb)f$B=7X3Buq_DiJH+_Xl$;N6W,)Qk*m;/d!m+=oU;>In$e.kCqofD%MR9+CQ_Dd,)TSWnI(65SKH<U3DX?_\*lsI?o!n:/k_m5ZnMFBUS@e0Y)APhSX#LGpMYFfd>r^4"Y5L?95@Ec0,(\A<S$.&*LL/W3%\UCu.I(T:kfL*j.:]K'QBoN:5j[6W/.MgpShBi]j>r'^jo0IHX\9kZug0$G5*qmhSc^3,2j`:=m_U@2<l.)-t>Ba+TXhKiLeJ66,%s/<W>f7,u69tB),+26-7hRL7>4F;#+I^*a.5CN3eB!kiJhS&=TAt.,"-cj8koVhV=KpT.1QcAI]oGcu*YQAJ1e_6K[2&;dbh.M^n%87_'LKXuEC;9j$[/h_[#f4-Zd8fu>@d%H!^O'gMjRX)/IB"*02)0F&OJ[lD/h*!,/qW7A&o_S"?9(08s%]_buP>iV_QL0%*NuP:k%Ip8C$7:5gpj6`rL'5"LJ[GU9^ZIsUa]<Lo&Nhta)gJI:0JYfaLjINgG&!G1E2qR-c#KJoT?J^dnH+ABrqY9OhWEAoX<ot27(P[d\%8Bieb[@c;-,:qcr#hdG@S$sJ2%t6HMGM&*sW*Lr;l^`,uZJYQVMsIKlCH)4Gn`2'.a.:N'g>@<Slo7$G&Md*'F4S2,IX>.@<dL?d%?CLc`oDM:"52L_]l,W&7@2<IcQXa8qS-lT#57F?Tq%HiUE6&lur;(h^(Tk>`DLUAD*qBhZIkGnoY0ANB?$u%.-\!0iY-m.LGWb&^%j<DnlXZ%mO30a?[FJ!KSCd!&^]fe`h:QdV^Gahi<q=\:j-2mK./nnQ<Whg-UaEt2f@e8=rk)>lXC8KbTX7.T\<Yh9ts4Q9Kqtje$%bn08KXC/(kDB>[Ucb8/Y1o<PspXa"a]t$YAAn0_DBFRN*&baCcj$WDl2n,jFbJ1KOMqc8om+/jolPdpXag",MDf2bd5BX[k[Qa>5%2'8t!RU0>Oh`_Qqneqr7G2r7Rk:O+cR9P8gQHfAdjnFa`j1pThhS*LVgNBtf?1-Q40tqO4G\W\)YO054s0_jd8`L3V8'`MBZ)P%>%6Xk"I&#g);lGa9GhetL&7,PcVp3ru`E6oJf00q`iq51n_,.iWqRK'q4oQ92(rP;n%fq\ttip#Ld,^Ab-Bl2(DU0Te?:H(6H^VA@6%\D:HS4MGn'`kN)=dNZY2b0W'#4?-;03L;;nQ5:'XccCDYCMWSV/['(#MI(+_]R.-aKt,6sQ,)4H>b'[pRCdWdmJHAILtLGXrT<su%O,qP(LYj<-\bfXTdVAI>R*=c^)*=-3k/0madDt'5;Ao(GRa>Edc?_N-4OR$`5;.F]e,$aj>Gnfe41C65k!o2&C#8fo&9Vl-5L+2L%5)`&PIt"j*nA-)aIc<F2B:"tIp.s8bmqk1A,53ZNbPE=4S*-F42W"/LWr,$OmH<<ts#dQk[rG=#m-iVcFD=M[QQD"ZX(j#1+8&b%%SoF%)s,8TA\65nN;JU)R'qZF7(in;0KK-,LLu[5D`,VmBCQ88H$)8',b=_05pqSR+PD_sCm\BLhM7GAUM&F>/9'Ku@ep\Et_74SQ%!e7B\op(THcim[1JWDdHHh=(XUf4HeU.oP=(VR8jF&QO@iL<\Kb$Ia/iF8#8/S/fnE%-6!`NKU<[.3[II"oY9?i@\7IcmeZGg[K;%\=Qfa-XomC/$:JFOfgVkf/h[PSfbF:Y:_;9"sYAd1I#(B,Rf,DX0LJ"e;sM(f9BtC:MBQp,L6=H!McH#%stfsm#&*$rH`sD=hKLE%.!S##nu+eJO5]GVd8J2F_Ra:2N44+85Is.K^W$>=7n]D\>J6'!le6B/>s636p1^`/p[I#]0@N*F428@uo5;lc-!WVtR\a?VoQiQ3%\L[N*H?fA"hDmkgmJ\u>c>XlH<QgY#8_1H01050djaGuKGC-B^jHBeb7JAkK?pd4<g83W$O^'u4p7QoS2WZ-\Xi!p.jIgusYsE=R%bB8dg7:EAW34iYNr!<-(#PDEdi;CTKc\!BH=*EMC'lQoP1?C>Ei6pW*XhjJ4iEkE7Yj:rkap,Pn60YW*PBQ$'aa&<LG;\uV18fbW%rlJ01'?/6Lp?^X2-`qnTU<?o7hW=^0&pp.[E5aRnX.OJDBs%>V7A$PUHSfHudW-Vh:9Lb#(UlDgA5!dX.<fsbg@#G2=&93W3p0',%32+&H6;4It\5Y1SB)M8-5*TWr?(4f.0IgmA.@F0+E4"[Pj]%iJ*0j+el,uY)c.++36sePWs0R1X/)gVC=%jkUfY=qYmQ'joeI'B*%IrKSEr8:HX(FST#AmNQX\nbr-Ej)udlf?!]/RD:H`6f<?q)H`nB&;'^lEq.n4]8"YkG2sDS_<i.HMd#\g0_rJ"JY?\#D%Vs9Q#J>%.Zu,[aaV_aR;)'K^TZ(uI)5gX;.j:71q<?t@R'b'?AFg2+Tl2TqQoc7KIs354jZ)@\Q4sG@Xa_M;=nrP`9s2O\-o53f@;;`lj?Ku%4K!gIf)a$-UT13N7b*@NM+Rtu#\Vq"<\D$!TXq4$(DlQF;Y-?/:1EAIA1?_7#4f&nPKS;%V*fNRM:+k)LUb/'X`K.VQPU!#F%'(S%aj3$"(-<E`2SNs'MA'`A;PD@RL+B'.$eA^1:9s`8ErD?KI^Pe<m/CcogWStLkbHZ-_^dVTMOj_6Ss&JaEWl\6YlX)5K<l%+*aDt`%N2(OPR7+L.rZ85&%#ALKO_h2$])k$B?^t#hSts_?j`sa$<2leSE2akErd5.iB>/3SH5EZKpBS,+"D>q*C'YY;%IM3Zr^jlXs2Tt$%dDYcl2tm)K-_%UpmAI.5SZWM"a0^g)d3&:8lZ^1@.0U1Mh9J#4\^k0gMN)#5=Fo2?H^0"h9C<;$a"O,=?eN0cgFhNeFKLWgm3<NZ%a&?\gUZ@aMi^VVq=1-=T?*?4D/&&<i5!PIaPHV1G?JWsN'6::!0"4hfs4KFBL\(pYE..[q2`k[8?1DEApNp33<_.7P717EGXhSl9%ps.M4!L&u!r,'.^rbSC$9?+g*]fYQLhVSdt'N_][PHi8Fn7XTkQ26stec-"LXIB?lQi8V]am\u)#cg=3(=e?2aaUIKYFL]tfDiV*%-+9=aE7H9UmHL*uQ;@LPUmUuha6j;ET#GMOm@5"C]+X<C="UW360n0MF/@/pMoq"u<0KG5JCT%TAp`R](G=t1e[H5t[l#NcT^5-A%FQ04Mdl`^C=&W!M(&lsODeAa"p.#QNBTn9M;n]\aVO-Aqrc-FJWL^Hr6C"[:)MIJ[HtFZW-DT-Q_r&*n@'<t;f8,9V?MaDT59$Wr%n,>cCPkKB^fKO.kr.R3UFWS!&-ai@KIoZr1r*55MFl/h<n8%38eC3j8\pW)ZWqBQng#':fL6`]s+qZG?([WI>Fp%8mh89n5QaA9F%&Zm^ba8H+tS*jGHioE$NTWVYIGq;I(&%\\!HK%pK-5bU.&7W%i.Mi82Xe-n20&`N<=O="@Eg-GjXF$SQnf.H_Fkq\Q<>ViJqNl$C%S'*R!AAc:N9&V8sE]:K]kB\Tc&*mCfq.`6:L]4nb^)Q<KZmfplRQUaC+q8tpki-jUUt+kgjI9S<1aFLK[DAqLj(5pG<AW8"e.Y%(%J!ZZ@N9[hn!]0F_Gs*q's,+sU=%YC+=i%k[YHFe=,],Th6*:gcQslG`)_)A^>.DN4qlee$FTngUh[q2MGJ['jf-n[,(JiN;7&sO7%p72*9R!n2%l6!`E*Y5lA539X"rfk&cjIaLBW`kpW[3X)_QQ55?hUKdGT[T$%E4FhA/$8M`gdhWADOjJk%>*aVmNm:jd3L5cjQdoH%f4&qoGdE/45Hoe862bQV9nIlA57MnmTO-\NPu/XhVT<fW?i48^Vf8XaXpdOA&Ck^me,`/]:Us[UBp_h/Y?);Oq-SIGc.:C\e<YTQ%J;H8X@XsOt$HUA.2%`!.[.OA!<Sr#H8;%LPk=,U9%tBOeGU4qO:J:QC_NH`3;3`k-o:cqf(6tkdVIc'Z9[aqE*`6MA,#5GtHkOuY%KPES\N%.M9o5Rnde#KLg<E`0m>S9rai=_!J\6_ULl@AS->aBM2)%Qb(b:;\To/%@PP'U]&8j?75VCY:G.YZ&B,BTo`k;c6g=u0"n%+S6[sM.X:(92W1YQo^=rH59BXJWs^I,bm,/;-TS`U8X[F7IIE%eQ(/#X?p2m4in&b?BqK;<C&461se@CV%79;GQ`FR6l$GDELG=_%$q*Y/HCA;MH6a?6`J@K-R:FHd]rH*8.RfT)9HLQR&W@U(N!W-W1d[e$S>]ej22mS7ERWU40ZDZS8Q=5766/I"H"&Otpa"#I8IWaG%N2]6/jIYLJQ37J"^FJi.=pV@<*mm<Rq3oa-*lTt:^-.D$GLYk*b5s62MT`?1-BIrq*9MS/C@XM0*T-/3qG^^!Fdi5]f*JQO>4)PO%`J[B_\1":2HqI%iAul?%WZDl]YBPbu[(Kns+C.DbQ7MJ8hjQtfpMi>OBc`M5eIY4t$S$0fd%&-mVd)s1j.iBeR$3mQ2=1sL"Ds7%%jI)maD^sVYMJ\'7WE1D5@)7`5/3VQ//>n=q'4,auA;SmiJlO#&`O)TM+mKk`jq4%>)K6QA6(p-Sqe7c0bdW`L]ud+YKE-CR2.+;W%=q&-3U]i_b)-00&QPe7LCKXuiOsIi+bg7P,KrlXiRKWuRb=cP^&:\X9FdL_`d3,47*QR[qKYAt2,R.6g7c`^NM-f;lK<eepAI0e?%SY\heI)b5m=GhEr(;`")S>IGrq]=L?Fin3s=%)X8bpFXAG9X,D?AM$ml?^`s7=@m_*mf:pFq^&\B4Y2$-I%(sdXWiOA-#$Qbc'[S%.1`sQ\^`*!Do2>RIu:#6T&Q/%Pfp<:Ni/n?VE(\>Zo&$'PU3UN$t4ZWI)NT5'oJc^SjWb*(`$cl(!J*/N+a,hHlC&:bq7M9co:AI%'o;E1B$$2Rg,-j/d>fi(8!9sN4\EmWX""\m0j+r?nM";I%\_,g6Ne`E.@RB?^c'"%YDBLd&Wm*6QfhJ`1&VrU;;j7p/<*Hj,5.1g%P/JPFHQJHhG-TrO#Hlh`kQ9/PKNK4Z_Of+'g-/YqV!^="@9dA8ZAiTS#1N]/$5t@^1KbV=oGpq/7!Tc:!m+>2ALtAKar/=DJACOY%7-CO?+am9qj0W2&AqH\O@STtOiZojDCa;VF=nXuD0t(NmTl1OCT15G#AJpdXH=TUmS"EbOJ3YY57__kQYHsN!KK,nY/7el/KA&sS%b_&@R>sXsR.)Ss4nPlBr+DlsdX=?YkiJg>@T;D4D=/<f]N2:*JYS>2]4!BV`)Q[j9Vs&^]MkQQ:F[C0V0[MtDE`nEJ@?M2l6Zs</%MPYTgJ27m20W2(e@-59Q9pGpZd.:A9%Lo+>`9As<U[@SCk*aOOl;&k"82B2b2"c+s^6*\W/&5hIWg"AuJ/'9\igb7Xi<;shN_,@#%M^q\d:e,P8GG'4X.]ldWHq$7Db.DOoA2WSNjWZjj.]ocZO\0so!G7ZIl&=g>De"Q!%nL@ObPA[[UgG&.Gmf.`P6&[=7\P>^)/[p2%9J4.D;fnXl6St2K1"RQe:Vq]ZrLA-K4#W-^]7s?s<2f"6Luaq/g(u)-49d"LU;kVJbd/KYBXuRfY&r5/UD@=e-[\Y$n8k%Jf:GFp%4+eQBAjNDJ`g#V2:m4CsHOb,1E](D!O,Zr"ed0IAdO,j-Q'Q:LAgN3<$8AE7;9TlV1Jq.uXN+G2,[rT@Uf4V^>"#ISB=t-E\#eT;%!M[*dZ0H899P$gJK=>tp73t)`fK.\f=CWDH2%W8oD:*R)@'3=g4VDOG8Kk`,L'gO>$n>HB&Q-&08M`X])@4GoiP[&,?615p="/6?%#Os.!KMIi)(@+\f1"KPur%cBXORRNJRY3?V&4^gbXKagLe&mQj`"P6dl;_8%7nZ5(P^$S$DF->X^m0^I$3\;EheDJS!NeNE855@K%)/J2'B`mBLcTDMT]_BWg5s%,+?d$M95oK0.[^;=D*cPY5O=.@ZSu;,r4[EUGe;BZ@3jjg;1b+I9RLJsqA@t*:8/85#,ZL3>=LVuE%'sO@+b,\2>R8A0nKc1W,WAJ0HjqK.G0MF";46\QS**+,TnYAiFTkU1i(-rf^/:.T&Y2k%URZ^+@SjZSC;&LcIe4``)JR#!*Ouf.8%Q%o_Ff]bp1>DH@[,E39P<2Y^ib%sUO,tO>lV0Y^m`*)%J=qZrkRY=]oiTqup#i;%AAKOjaKHWNIFLYnVHq6mV4e>q]Np'J2""XL"%"MU2%W^<GHE-SW+Xq2%+<p'Jsh>QbtD@oN`i]Ke0Q(FYu9N"9(8G%da=Af;9;dlpYW@)uqdki+D9ZQA?r1kSGQo?`Kf.dr0[R<aF%HAI)<[O;0pO@WcVdUh\JktfrJ(4o-sV3UDK/;<dkZX=n8W2Ucf*Irs)Q!+B_RhR^b[&6I#=#&9`.mqf/!uM*ON&$h3#M9Kt3^m4R%SgQlFcpNoF)-ER3E#]3e"9`UA9SE>!1gH/;j,!#Qs(hai(U$rAn.=!1p^>Ip(U&rIroaJNrqZkG;d)[+/*tc:Pa+lP)%uB`ksW@O%7@D'-JG6Cm'+[?N<DSO,80b'*PPSHFTInQKZ;:t#JsC&PL#jL53nKMuaDSK#Z&n:TX^u<B)"PS&WOUNlTs#?Y6C(JI,tn>aOGOoc%Y?E=YF+A&-&>pjl^B@:7qRqd&fHK+.b@5>pig!.:EBdd#8]"):=c_P:RYM-BA8`Bf@PJPKI7(d7r)1FCk19O#K$6iH/k"\7[D])k%E'$=ir#93VnOufp,AIN,`<tZoFAuM2BrTCK.[-`D5K2V^"ZHE!i^frJ!"2*UnjqggW?J*c6jm)?R%/<7OpHqKi6mSB`<Or$3a="L%?P&2CKn5?k22=):,QMVHJ"]Q!,be_/!<L*3c<g0'!o(q4Pjf7IYWli`#-='iRa`&D6m&@6K3@^ILNs?6T&?(f08WC8gN9l-:(uoA%a2m6Q'BpYq77jl+3!<]K(4ITn"S?D.jMD1if><'3N<j<ffKTZZR"/^2VrDYQOP)@a@j)aUP)H:JX%P$(8.di#1DX&"\V<%6":m`_%.AbB(^5,*T`f(Zlfr-1^13!=a74#>Ui03LZB7D]qRRtK+LUDso6rVK$a`''"DAjgq7ZdidbE,DfaHFYD<"-s_8qN+ElWM*!'#tMf%X-G4cP81_:')%2.#nBD^MPfgHI"u-4fq!clfL([/O$_D>L7M9IJ)f<@A]:^:2b5FtJf(X-!b+?2+<\c^fHSi$8@/Rl#<%!Ph1<?r%0;,Vl`"A-O"mfe5HF?l<U-,0G"F!,c?ib_B&t._j@#i/.G7a4-U0UW^;G0;;]>f_M,$dd@gsRfNUr12_]UUe/Ic85j"K8=e]#Th2%T`^=4pb[db.ITJ]Nl%/-Sq/Xl"c*doXi-*l<1G%U_$3T(`?d/oGVHtGZ<RlfBWI!g,TUH-"N$IT8j%DV:%5E?qimqe:Es[6SD=_e%jLpbuH!:mf(B_GkZ"Gi!*qIrcVO5I<+WZ6ZcjE`2?-\3[F^j[bhlL9m!)0Fe&uA=A]X3jYcj\pt(0iBpB-P-QV90#tp"6L3PKP!p%+Gh=cWmW5,+>QiH9bI@QM%YO538o`F*[Cc@IkC?&+tBC,,XoWTAd+`si>"2BJk&?iXSUMJfI5udne&d\cj]@u,A[Wi$GWL8Ya>dG%MSCT=Ql3hs@TiuM%$"q?K0r*X)]K:jF2Uo!o-b9q[DYb].*Aj",o-V4,;B[&0`Yh_k\Uq''P2)9-<Nl?U(Tsqb!PkM4!:S%?%]L,%_:5b_c@>1@#XKf(1,1bh0KpXl%-nTmW=!s1o.0frW*8C)TJm!!\]u^nI/Hj)b3I'%mmF<KO[*sF'!oS%HOFR(Q;h>cI)(f"eU/j*%1F4U&;Rg^uW%9G[k@H\aBnnQ.LeJWgfG]SY%kUKYN_=&;,;ijR<\E=,N,jVm_du_/]3kjcISXADK'PeLa>^Cg,0Y>VATG4q@N=(Z%GIR8?fT!XC_Vo/9ok*pU0U(NfYYJV3\ZcD\<=qrb&3#A3M>fH6dSdOhYr%\&Z"t:&JrELK+bB\?36NKqk]')73tM4uO:BGU@;[JB%MH$!Ub+gR^?8"93Y8A[F6k51:N11Be-[="+Hp_Y%:l9r5J5#2q$_Z"1&s[9I8b;uo=/+hV&0[(jXS3R.[oe$^Wh>_V+6ZoX;oF(!%A3E`li5B;oBpXaH;anW2H;#.XM$\'g1,2AL/>:TnI$RCJgp"''b9u:`"&uM"11G/>J@I!1TM<H,l^e6t-n<]3^kr<eVu;VCa]YUn%H:J][0d`>f9U.#)ktnWLY6<f7@J!RB6G/J0McbO`7>cq\P[LB3_Me8Tb3!,8Q,B1/]qiTO(o2'c'jd#6]qd&$=o+6mTcL%fGR,g#%RpZ<<HFdFO8gHW8]qUdla,p'440/eJ<uf=YW]Pj!]L][:qOX4e#Tk=_6[![tRj!A^9*PADQH63g&R?_]Q!X1d9g6db1#fHrPc0I^%T#S&\$@$!?)%qE&6#"Wf"%m:%V37#9$&qVAj!7$#1B<:f%rp-3jS,l-[[H"Bj:ZMLK:Zodg.TJ:B_RgCBIeX$("+*RgDKhu,pM2"%`"/Q!Y@8O8&N_0Z?ZKH+BqY_8Z[9_.@'(=MJ.[PLrlQFSfn@A`i+s.+d_t3@,-Ed0S\TeA,S;P]cb.W1e\/M_$%"X#46Np_Y"VVD%8t#m1"?em].EI[2m)m8F3$?n:"TV4"hXV/6d3L<A'Qt6rFMr#/2Pu7d#suCrWbO=#C*,Z6?,092$s#4^>7D[V'#ENfj)Z/n[KoLu%bRl0+F9TO%$rBC%_r*df"3c1^Q_M'G[GbMl'IaA6V`3HA3.,C6TSGsJ4l0T>"\2tY3$?LfO)9Rfm0>c%]bQ!s=DpNS*7<f]G'*3W%?-aN*N7iVnZ/0_B_/N$#^1jNX*&GT-&6K8%'G-:A@WdB93un9g7VnK[V3m<Y_4_,d$6[QqiD0Ru8`5<(Wl-.W/CT5??OGQ,aER!Y%##_:t,a&lfc#LObBN9b;-;6t5C)3q3HjGNr3&nh^3s7gL;>cdI`W/?=QSPXNj"oCk0'4:[GT^-ob)pXTTSd1MQ.f?q=*t2]W6A4V%+pM0-oX5J2,==URX:_lO26,_$&f,,BYQ?"0m9+[gjX^OI8gK]("Mup')<NUg&;VL+RYY[9ONe3$*HaX>*lrteN>_AO2GPR$(XaIO%E_H5RLn-eP?C.En"b\4*SscgEWUlfC<a!6PK#?V>@cKG6!M>M*QDEfRKpkn+D+dm$_k2J+MC<5U!AWk7ic=79(g(V(\d'V&bb]'b%F#X@".-_Xk_cY\Pk]\#'?qm$]dUX,MqC*osS"t^OWh(P,A9h5rgYkfAo9b=e+d1@Y8Jb#13+T8<]8:t!1+cAFjNS@/-t\S_JJ<h:%0AedKr<GU+XbKEnH$ns0(Eo=1Fr+`sYH_1<D]XiSEj9;J]UehNKCoa0@S/0C=Yk]A>9YsKMq,t(r%?t$M8e$sdONfCA88=n!@p./%i+u8KK+DJo"M7B/X2glD`$O#1b)A$+.cUge<=@hPVc::MqBOW3:E%Q*V1G,;9OY^ONi3tmZVX+YV;NTCQ$MBM$eqM@D-i(%/t8ku%P[ft56EG.M<7m!naQ!9jVV2ko%<uc%&B\/dM3*TOjs5tB7#8mr#k?eu&MdB/M\,or'-Y)_'-Rhm7#:^q&0[gVKu4Kc=uK>'>*?pb%G_ro,aIXO9a-;oun8IAJA"!"b:;VU$NJ;@F`3_0bhbLspDNf?"N7!"cGHV#Zh$tW`2DucuKoAR+!Z[2Y;/CQp33EmMRc20b+W\t6%KXDJO[(3ASc?qf(Q,s)\"=4d)L`?LNOqda5E?-V7K+pkEjbgi<l0/0N&[UkT2V:&*8'.I&lkkD]<q(Za)Sm+gjf1q/T;MsuP;'b-%27YQ$<=+BnKU':XI\0;q*4sA>/2dtq(F"R;kB8ib3]F_YlcH?<Pb!Vm/:V99a,Hu46l:<T.2Z)4qZ_WQ^S_921V7A"AWO)Ea,1':%gZZ'[N#?c))Z#m@@U&ooA/^7V!;:W42W=f*;_qFVF_=k"8/ga',8k6mIR`<l4sL(OV)YiGj'uMb%j@?S'gigB/-,fLS0u2[mgU.S%QCE88^Ncgm=7K<nrrgQPM%jQ2W+ZB3n>-RFSrEK:i)Ae;'/;B6L+n:W@ub"n)N]2jp@P3Ni>OlU;c=R$@9H0;J3Ct&["KhCKIjot%WQ(Y3%VbP"P#FbM.'_/nYq1V!7G7ABQHZ))&>$pKc!uLH!='#s>p(JR[1l"@&33+5!>!K)T(3`q+F1/b.Lkhh>?#?02(!uH!['*P%CkUWsW5qF]!_^'+[*1OVOc``Wp0h&'T-8#>B2T++EXFYLVET!W7''ip50@,r*KIH>EOAgA!Jn<W$A<</hbt,pnr6,Lg6KYVZudMQ%,SE;!W[aSKQ!u`ZAr8udb$[/<+FG@X8K>,4J4N9>]H^Qqa'V8M72\:=L!H=S9L=eLqF=-:&Xg,8:snN"ASIs:$9ks?=XLrlb(pju%.f.f":J3+bRcaFIO>m]2Wm'#bP@.U*2L5LD3J_qF8lgQ"b6BQVEWhPl\L]3?Ig8m4c4cK*qH]MUii$9%1a?!L;0^;_)(?fr*n?sN%P0`0m/]Q;.$2Z1WXXhKtO<X`J)0E2W"&C3)%[bX;,!J(a&VM:II:P#D&#5Q2Z(H"95(Z.)-*`\+Xm<*N!'=B3E`C#TCs7ZE^bY]o%meJX";Nduo:'0c56:s6@K(juTfq<mF28GQ`XXTsJBEs>l_!c9;!JUk>_*k,/b@.L[Y=@Y@-FtWJD5+GVkWp`bY8D^g``8u!1>SrS%d!S,r#q!K?`^!EAS?Z**:EH]s1e78(&<[3FRV)'IbLf_2r!/$Vr<!Ha_546m"8`=pCG]+3!&F7ORHpT/K6&SWAcT1<p]kG(@W3XZ%7c*(Ae4!p](<ZRK9+gk^^/qP"i(ufTb$s=]M_et`=Ej&t<ju,/WWYeE6SMiK34`a$8HKXR8sJD)a0p63<4O&>ZX8eq%(hqD*&C%9%NcKMK#";RVnD[.8D$!X9`34tQ&0jgM6tTW^V0o75$k9?gXn(3@Qp"N%GEY]V%D3'.$c3;[9bJ,b!r#g9Cu97KPA%O"^f_(?%aJ<B%B/-AR06kcO+K^N;LpOm^B9^-I=U^GuoTWK<$d.+C>g$7]>]'+(`,ZWRh9O/nZZ,8S)).@='=Bu6/9riK-D%Od`)FBKY(8Q)Nnj>u%,qgNMba5#o(2"uP/33'!)b[?(-&2dIn<Ft`)bCe6'f[tD/Dq[<V6&*M&Be.B^)EN^N.n.*&j^:n$R'i?lT#>IYj<p]>&kmcV1E?>%i>1q-KWHKG1eZ>bJnH"i(<]nP(m]OfZ5/,&RA^Nr985l<R=M\i`3U5?=k8a+<r-"N6I"U)fBcU4:3oU!`W9ks&_iK0!S=!\RCjC-%ARR@;.PbG3MKLJr>/iIY@kH15mC-hd[7J_2*j?DHe/)e$$^N;YRfR<H`R,9<(9@aNide@Cc(npd=Q%]SX<+=!,mV9:Z4b0?_r[4b%!R"kK7+DiYa`DS[q,2V2;?`"jCr@QWV*LE)nZHUN8:cl)4S2sDAZ!KaJPKi-9pl;BKPCuW^/KZ+OWcAABirkM&UNuf\e3SW#\4Zc%^pC`^.UQ3ZXKRM`X3e/d.a]rGJFuo5W_iC?XKP7HJp".*mLp@0!UCs]OY@6fqN(`E,\b'j.R*2OL0,N;OW7%2YeC_cDj1L.Nt@-P%GJ"GMCQh^b]W]O:>2Sj6G'+%k%j(=5e(9iW_,Zkj+t*OV>*GS3op&AO1r[_F^(RJ':BKZ[>34No^CnBM;*)Yn5W_ir4S&Z/UE\'b%.NEJ1Bu'WrjNm&;QXtV&`=bJqQlftP7p3XYj?t+2@X^^+n\t?&nBK^$&fs\^:BV[/.q"Wr]W\QmOcK0]`:H0R=l+pkU:^nZ+-("Y%'uA&iW(2-/M,qLjpp=U'A)`=.:skHZPg^CTb%g.#q2K5-a8F(R:J1cOa%J'7!p3R]2Y>6L5:fo8Ps`cV=qP$gi-nc>ic)6Z%uVd\%P(<MI;/Mi..dW3c<N7-;\6k)+nL.A(5RaFQR,re(qUs"%8nH*>1BI4h)tG]WUQ&J:7NCo6667r$0c:t!#SdV9`pqb&kY$7-88NA*%A><^5TF*Gi![;0m8r0EM)116"as1$NTL0H%5ZHptZPAq[\l%9H2R5>8,UBGLLZ9I!M3rmOg]nE6WQj?30LSd6nt"?b3*#p;U[3!C%<Yhr`1,<U$Z.BX[.>`34&EU_S8`1cr;.B($#,MrChq),%-%O-;_J.Gg,<S6J1mQ.\&tTE$P?]m[&d0<G`2+BQPJa/RcO(W0T\(#i%BqesTr(I=HC96T^*%M.;etK=:LoN#07:$,pPh[XVGWN9b_*pqa%5FJI@q\!rW=$au?oH"GBA=gW7&^`a+nM*F+Bs(Ea2J+B\55@;%$\?g!rHfrYHS)ar6I3"u21Y<Sl:7XifQ+3R/s2#<)H7%%J8RH&M4GAD\2"MA,FBq%@eGEdX''-Z\D_/D-0UD\1XPsf*KDV'r@-\4%nLei8&\u@AB<kne[`>kSf*F.m3bPGg0'*cl^mn2`oDoS<eRb+0Z,i#7_SIi<Z/Aj69dW3PruHJI!V9q@!N'KH5_R>61Q785hF@6t%\?LO([];L-a:Q`Mk)A,.E5EB*n^u*BY[K^ZnthGDW;6Rf@0#6lU#6=]=H]S>i=#gE*hqm:L*M=8_JkT$_*H<Sp`>&4%,.q[bd\mV%$r1.>3n>Ma!-+<]\E5"E9Obi;IeF&b:THXq#S;35&PTo#_AHWR_*[2B`a&9T.nd7rTJKQIQ9\Vb:smE2YeW"(h9Fr@1LrJ9!.,5K%i?Egu$#5?7%[(Z=?)I%pS&hnl$jpmKnI1/^7Ymiu^cK8?Z/g=-g^Ig5\XY#ml#Xe2mhO=W,jtQ$A%?-/f^W)IhcVH(;G&?=OeZO8%*$UfN_uuW''A1W&cuG-AiH`W[_:@TP2)]e^'?XQ&(mN^0,AAo.Ub`pMS+=L`)P2c#:sRP\81J@UHRcfDd<^D5BW<9_&)U^3VbTR^%3)<L\5Rpg!78q'o.S6+;3jTs9#ei[c5W)LjPm"Lf-6*<DBFAZ0;3f;u.2M%fo\1P*kT&_ui+d:SEm6$jnX]%]ecd7SIE*B*EPi0O%PTtc5AI7I6)P+PRV%1ek3%hk!r`HD;:p0m0Ee)(tr==:;"!gUkOe;q>*chQH>ZIW2]6od*AVoV"mO/<r3/7?.%PUH`[&Pd@Zj7.U%!$imD4G(m'\N.HlJd^.?1;.(n!'%[DTB'N3!aep$ZDS""an`@</13^<Bo^6H;,>Du#+QKn0k[]M;p"p-"M#0dm];L>:NUhDK'8%$%`[kT?S`g&''@f;A7#)V@R.+E(_)thX8X1&2.R[u3>c9FO+:&35j6O[f-iC*PEVouf'j++_*_'=L/&23)\Sln4`cuo_["6s][[^-q%&U#p0ARLL:rj!ldM)@VU]sgOl&U6,'.^2?^bnB`Y8<1JI]cfXXOY"Q0LeUu$\+/HmMe)>")B2Aoat"Tu"L\R9og>Z0&g5I8#r&bU%Hpqe-87QtNQJ*P<,o0"2c_K5Q93ld3%dc&FLH#[3ChXaMObkS@\/>L8e3"XfN$)-8cko-T7c<C/1knQ&&^4.8%iHU2KX6S$0Li]R%h&7LB9INL7@tYlrZ+]NpX:\](^hK:`)F::,4?-0SO:u4>J^+:7?l?OG1:Z<gA%X[^jU'qbZHsL5%:6=tS2HJkOX:]CF!O#@4VD.;%OJ&Hr<calB'""Q\4ZS,t]i+=')C1\\R4Pga0r6MJ;)`]Z6Qs.P9M-1Urp.+u=<tDJTute,MhGbKb"WK!,[mU!)-A0`AA_UsA,A(7%]=<KrLkdiVh"OZVJUU\].YQT)'T'c!LU1#L,,'B5\57Is\XH3cLZ!`\BTP'8'Z%f)I1Cr;F<h*97ERnsgN(h(NQa6qk\[Iq::kT'%Fpal]>bEE)')5?s-!uc\A^DFpCo.Kg`1lgM836/N5<=j.'"FAMQ,]]HWJT,-\^E$*'+7d(KPD^6IjriC:%X6CUc`8>/RO]AaaAG1%D_'bjX?neL8F:ht<WN>oj(MOh/.dp^WfEGg+588&7FH)#SA?3m-<(Z;jd-62gM`/Jd<Wsa^t7Z2jI5[TU?e%BmTddQRs)[WR(4Gn%04bIOCDrbW@5Td#,)KE7?@d`\A&_,4-oSs&o*Bn^WBFc<JI/-r9"equad,G;B*;7O$H<,iQQt'ZF?Lao`tG:"99(VYnJ6,!:/l3^%9t5ng;oKo3=K'YsQ<-EY0,Zl3SFeWEj4$5UNaa_f23?8=gh2:7!)^?WOrHC7r10A:UAJ=&=]K-a3Ks\j?Q_P_``T.u=3mmOAZRP=%]VeB213R,]Mc+W`J0_W+b-Nj&HRdg[UWf(n7L0Q%5I0/Q(6S^DJu"cmiS1_3LTsrDpHVE@le)iTWA?`&Lc&!Oi`QC2fA"4^;+6(:%;U9X8(a6QaM08B0Q=C,#I\Ea&;MM,_L9!%l,oegD)TaSo/j[M[U+*1KX%37nC)i#mZ%*%75"FnW6nHnGV(M[);Ib1bK'aKrKg_EJ%Y/!#Ia;K3'Qi1HB(_oX#;j8QU1MgG8WJ0G8QJM]UQT>XsWl>5fTR&.JK`n4bHZp7UKZmC<Z;G)WE@O].k?_R9"48&!$][IP:e;o]%%Tdb81Wdet>F&FTUNNYIWo2A2!-3,pc?(hm*@iAfb&X0sClPIAr*nRN;NpOd_:e$q?`K87(p421ml:48ln+83ou27_Bn/54AWH't%.Wt-;A'Ps\o:V<F'$Ph5,Io5_9/,O9$bi0^Go(1FWJ`Ur><DMVP[1(F41\<eU")T#6a+\_(W7rSS=O#\o.t$6<16Xb!6\&8%@>5\%=ALg4+pF^0TlZ=tP>D8POQPm8Y_Bk"4;keie77?*R^38s"'g8M3@hF]k'a$cXrB)RRk-k/14'mmqFG\A)oDru5#OVOejgW$c:8es%^[mSJY:$OL&ka>qFB[*r_rWd7'qZ5l*!)HSbj!3rM'P25!C;[ZF\teCH:as6$(du&86a:5P)cX93aL%!oL8->^&W0,@=Y<el"dSN%VJFI-UV9N)AbH#1>-/m;f6odk>U`/j=-KCkclOD(9GM7%H"uW7*pl&W&O/C==X(AE*21AacRQ]nXk\*]Q/A*[X;XUN8mRI]g=#%g%nI#o+*X7u]O[2^ABEmj,D)B;A8>Eu,R3T8@$GE(Bc1MC-hjf[?FdZqmj5%p_PL8tah]-8DCIGQ%#oSACa+<Qc8,VR5Ang1=Z?5Z^%3Dnj!AQ;dgEQ<Ran,b6(Lu:lc6FiQ)AoC*5c"$DWqW&'jcdhBkaVd@L=E6.#$1N;(R39\P4V_?W3<NBT(4pOH#1q*P&t>GC*Z30U%p":4uP/uL/M=r1)H-%@F!0O="Hu]Fq9J>Shg^FC]/BH'Q68UW2#ij^!!7BS\+[gB-0U-T;q8#END^+ss!p2AC*-\1Je4mf3D\8^Y%rVkiEmg?4n/^!&cbiNF>R-%u\WPg$[\J]Zna;kOPD?_dpN\i\IqEcaO"M#D;7WkN=g^IRN#;Ln.$HXjHjG`Ut)5oB;C"'_#,$pl$%P[6#NeRZ5kF,>.X[k882]KV.Yi+j8@(DO5oD%?ekk.^K5hQbc9WEH$3ej0b!]Vh'Q9G1^c1Cd,9LC%1"J0/-Ajq7)2?'#O(\l6PA%E)+?5RLHnbKZ.tu<6i=*7][)fhu^.`C3-1k?NfmqcXQ^U<?RFjH!R'g,OOt8_'Q"5>g*nH14"Q[U`8`(!g9P5V>#$3dPU]cO$!E`%q#fM\AVLb=kK@M5-Ps,qXc>+:o/9@hIPCG-NFSeI,-a!O]o=;u!?;T"as\[?GTt0B2A&[P5"F3s\^Znr##n#<Qe[IshFs"fM#s?p%o4:TU<%,"pUQN1U`n+7qNF3#=qE81gIEYejARZ:Wa!?G6QKg=PbX@!N$PuW8,?Y'XMK+Im85\?Gilk)L!c"&].iC674U/B>&mL<%%?!n,-06]i\&WOl@?%DhDGbR#*08@W324j"?<sSoO&K&O='D+m6i]6#ToZ`J"@Pr5^X.8J@!a7#3WrQ8rbX(O:hHEt%*DVu`;U,9p%+MeSa;2R>A?TF$WO5TXXQAK^Ncq5ccVJg-*EcYromm5%NHfu&KA'UZdS8`GNbKs1JTh0uQY\]CZ+2pfR$E@L6"slep^,2?0=NW'4%T7Gj7VIP??W/"kbZ,TGNIo*hOXPA+imgt^@UDWQO_"5`9Zj,CSWH9B2PhSTH%1Y(YB$,<QUAK<I+,B^3YQJTq`ZAG@K'uV-:B[L,%\aP[Pq6;l/n3),]],qnr$>bbX].m"?4OZrRZGI"nWH^,Y/&cNm.g@-Q6r42>iPo\q6-7`:Ef\XNJppgsjBap'-a#ntZ/lnG^kf)_%,1<NZ[?Rq_!#0G`1H'6j8t_%6MOVB`CA:a_[UC+3%u)_g8B$Y-*`*slnaAT5L@5T"gc]h3!g1[%XUEYJPtK3reHK^Sog6q-b",A4%0$jU'/l7;.@2Gm$ql>HWTH<\Wcln?RTS@@eN=t[]"d7Pc@+>Df9\!WqJJr(*g7'A@4^k"*R:-o1_<m1qkQ3V^-)DN%E.J'&O.l<!%)HMHJb54GT\9j^t#9"`1#O8RU%L@G#p47P6q`k6WI@rh^;+H&-5VsP+\L"42rl0#fI":GJc/RV;;5oo23Zk:dE2H4TTT#";7tYQ8%9bdpP1L;/3+"2tT)c@Ph71O9#:lbc:JE&gJAhrKP5JFNdrtsgET\S3mj=Z@$_s.28hu^lZj&E?deHH;=Y=W^d:s_gPKs^hD-88dA%ik:!L:ZOp;$P\C\9;X=<"3mCoSFJ4.KDSfpcijbE3/>(1!N:Xr\NkFGje3%rLd"6Q/l4+l]GtsC@RirjJouWRf>tot^>%b:J!YAY%$!j3Y(Pu0,EN_mcQY164Zk2QRg^*RFd3b*u4e+1IUm\;ukAN+iU9Uu[.qSMPa>>FOQ<U1O&>2UR\&m0]@c.EG1g,gO/O2^.Yo];5%EIOAW;t#aMaa/JbHeqQZHY'l^^?=)-jN$H^;P"60PbjVFajDnX%l$OR&b[^)GSAtUO8/6jbYl:-j<ulDIo[FASB7e?DlR0e^oo%;%_5P*P8.k1\Ebq$EM"BC)R/2#YRa_QVZtCCJJ6]f(H]nkY_@qq)AWIK<3`Xk+IOP@(@%L>+WJD3aHprF0:)o%kn`,F+??);sP<=\S%DL9;4c=<.C^*ZK"hje<i[SPJ@jL]:-9n%'</*0@\93F%GRRZIX6m9ZD$&FR8[cb^p`p@h'*+/c"Gaend+`\*Lgfr\]pH7R^pUI6'%%.7LW));Bg`c7$o"6("_NSFVJ&fZCga_+aRfhfCb&@o(#8+)eHYhgm3b(rjN7d^<8327U<%p2eE@P]+!Om/WBXkM.8!-+]Z*XcKr%!Xb^]o2(K.Y67%#NIN/56MJ"!&dbY5HTWEJnhbG!K@\*a)nH9qaY#b`0t;]UWIen$GTnD/fblB//q'#*Q3(MP=@D$2(gA_G$o"qk%RN!L^)MJ+ZWJF7g1^MUZ9?oM8d$RKOWI3PF0X[l:DpT>L2V$mu!_KLe>Or&MM7mNm#(^`&SBDj^,VF_-(GPJd&,1J.+>D?X1iEq]%4n_^ffUECVg7U`>(p<:MBnJZ#iGk"oB].3oF.Z!ZY:=l<KU0Ff2OPI"b`E8uQ(s+URPtM8o-p*N)[%@ILGj&^#jY;QhB:9b.$nmg%8gk\$@0J0(\EVE)AP/IOLq2R#a+Cribcj&bD;HBr>&hWOPM^YbJSKb#7j<'oVXo>NCno^s6'L'8?X2H\JR?$H7IG4DTZL\j`hJ<B%!TF^s"&'@5\Y^WMKpbqZpV*%g*$hRVmurVdE=gsWpFeBM&;/0->,7"-QqfZ'E2AY#Sq^Csj4hP0gg';P$k`eVmAZS:'*f!0k%bkp%oL*#i2JH4`#185rYI_A4?4`AcF<ok)"!.i0E6];Wm,OinD\-#MC7)&8@>KT]2&)WffKtNF5\*BpQms\!l@hD6^j1Rm,9@FrS2Qdi%=jmQr&K=0?4;?@q=UnYA7B*c7LR>B!i);bLAb'Z9[Ra\</o,d7)rADI&D!$To=dh&*fft0;.NC"AUYnpB[3>/A:D=AA."]2!>ER\%M$rGN6sX;_q#Q[1=3LLYOg#lI0dE[2s'D+#Q.2#eEgeS2N4qt3XNne.39F;=5qJEZ^Ihj5nB;ClEq[m?Ao%b-81G/..q1h6RKR2R%f-,kD<J>k9_DAs,PZNK#o0[=aU@HFDr2S3AL`H!g%;`VNnie5$5)BR%LH-dL3A'hdbai)&k]n8pY_3]OhH.Od$P(Z@>iB)llU(eK%<eLYe@VO!?F$;uYfb?"!I(3Q>9&kHn+h-([BJ5n%,G+LPb]5mP1R]XVau#R1;Y@@HkGr'qU'Tq_;Z"nHj_6Q[I#./i`a4AdMV)!;%*SVOh.$!V5c@7m>/hO-,/-E%V-2)<gbP&/@.skd9Z9<lj'mYm-]d9%NV.A7#Z?%<.f<W*45)U#W4_0dXf(I.$YHldG3eg[$mmrWc%[`:+F+kNbmWs`(=2`B`*[R[b==e1saVNRXg=JCAVXIK==H[%A7!D"[V6J3%VdYi,F[t^Zp)?_7+Ze5RP*3!l/k9q$A`G#Rk:fQ_F%9K#>5J3V":(a(77J2BhjEtj.8S98^j'EZ57-j5q"-j2DAP(GNg#uR.eJ54d*<46GMgL9XR`\n`a`"_.MSp`&5T#"tdJ<HoL\dSaM%'(g&t'FK:p-dfR5\8$8Snk-Kq.1-6N&=5g;85UefPnK"/`[M6[2#C0L'FLA(CIj%h-ku"eZ4ESir!8s,m$=O`lo,p4\Ni34F*!&f%KpMN3KEAVhMJh_M'8d'pA9sdVF5[2B_NDRScM7bIipm`a9_/q-->O36IKJ4rmE9sIT7B[.$Acr&i;&@,@%-S47TGP0,SLiViF-"(%VtT4.btf`INhI'tXSE/FE#C#hattH]?.Qt$$9WU.Ge+$3na5T6J\o)qj?itNbf'o'OR\`q0>Uog?bpZ?ZTE@Dk.g$Tr\JU%k/,5l%D^SpV,V["j,`iU`OBY'R$[s!]f8#(`!\:>n!4q2f%P`n.?Gg@4ie6ka'!Aa<f^j\:!%B`I#Gt84\,U(V8IGDke4pqp#_Z!4>st?`%Jr^30R#_M(ps;k+,1).]JmTSGX-NK/T`Fh0#H\<D($U_02BoA5+%I5[:&BdT&V0uB+p*D]G7fDdb:-P.C$"_Tot;-NXj%?7KiWcJ%m9!k?HU#d99oG*#i/(#`(4@W@,B4=j?4//HM)$@L'c,"IZQO*'Lq*,[f.fO\D_f,XKB[0W?;BCLpP&HM=c]QN\b3!!nTj#mVh-R%%q@02W=aC;>AU8O]H\HQ4mXa]78,W-EAuX^'Eg.K35H>E:DiMF29mj-5>1dI<e>W^a-m-G2c8k,4ojA!SW0];Rbdp+AV+"s6Nem1-%Y).,KV92aq;1RT:<&,_I+W)D326lh>qR0j[CRscfXSr4WBnlg9F-mo\X3"5[2<Xn1[S,1QlMBj,NuM3:TA8pa.8(jldHIBc.!;$\%B^bd/V^l9N$8?Y7!g,#"XO@o?>fu&sXr_XZ=8jo$.uN$E$:GMJXOFRBi0QS<<Mq@O+q$"1.ejK6l^<Gg'o9NXk+/XYHZZ@sbGDLB%ID"ie"i-2`"AW$+Yo&PeF9N:gA`.Y>&Ee0.QoF2d/CSR18XQj6$b1u`To7;"a>mP:[iC]CSZY)J`2X5b\mj#1Jt1;tJ?(LW"/dX\%=`dCXaYaPZe61E5<E6r5i_j\lOiNO'<fCB_Kum="Z%Jt)KY%]:i?08(+]\km>&=H#>-'ZV^-L''WKSkR3ohe`Z7n$I*:ajBZ:='E%,=C0K@-e%+Hn]h0<%:rAf[ggO4CfRJOSP4(+o=+a)H+af4lR?aa"4iG2*$ujg'\b4l]i+oY3/Q5\FB`S`_jR;Eg1T%3I1nsiMs2*%8C3U#.,qu(*qA:^R&,D8a\cehrg]WIDp*7dO:R^bBjfV-;-E@JA[NTL%,#-VD>TbQC\R3Vra3/K:Fd[t,7epB0`j\.EIcuZb[(PB%8jS"9lUg3lLS1ala\P!_fN93HBnlgYF-n2&X2tsq[cU#<G0!5\f4?<ugqWtoj+d"q\O0P%e*+H(aI:78qoV$^F@r!'q!C\%nYkN(%hiV^iCIf`nliYYVi)0W+W';>Er"IpERjBp!,q<^t/</2/ABtY@RBO)O'_&bS?q;WL\7j7Qc$Ch1"!lQY0(9NCWKD.n!o].ZHD:Hu%K"Wkk'e4?M!K#cn.raGfqe#3b1VU1MD`F?/V$$s2hY?U_gd-uT)'Et:RVE+h[$U:D&#fs&!QM;T"64"tJ]LgoI).p`cUoQ`Y+b#B%+RuTaKIf,E"%7$;5TfK3+GMFR,`B$T8gU.JQca,hFK5>`b.bs<LWO,(;d.gH%/:u#Sn*\k5\@0)$F*bhI+O`<KiibcG)eB6C+8CC%*!$11*]h61np$c>h(74%O0p.I7DS[YDW^dL]<GnB66Di9E?!@lW#9;3)Mfcg]XCL:kYmFr</$[Bi4)66[3VKJi+JH75_PnS$9YO-%l\grQ[&*gpjb[SskHJ&pL>nZgD&rj]"IdelO4"45UJkEfG8f=njF5jm?UWULO]=$H:/JKG5?B>>Ys:c`h;^TOnT%<OWcpu&Hd9Zj%l1KHo@[MBI\QsYH0HWVZ0irLl"\V6jj-h`MRCCS/<XO'446:!Jh'5\]8)W7X96E3JPa?BkLI)nC$<ejkCaiVlBet?d4Tj[+SCmil%O8iX@Qh!>(AiUV(3g)ZTCm^c?"IkfbXT=0iJ`Vr].b,i.8G6mOmt0]]Fd0jX$GEj#_b@W$``a&>*=kpI%2<La1QM--6VHBmF6d,M%2,*%o2pBWA]FS?4_`4ZJQ1,%o=^[qiEMT^@jf1^*TY+ms<3S-`=![Q=)98$<MWD4e,1IH%4rVgiB\"\a`8YW8h'51TL([moa7u+)%Y2e:.)Nj?M<L\BNX_Qrfk7o[H"'<XmajoIN))R,lrJ]SG-(R@fC$;;\J01;6/-T99N_3e[B6Po<WY_3cmAiY?9U,`MCruGDKnaJq%3#*aT<07K%;Iq4hcY>ju>kf^_9k@;'S'UA"9]anj3%Wcb.JJ6;@4<FmjIiATirOOK;*K#3>KJgSL)u3PnY>]CV1Ghld`FH2F<]Tk%X#^!9>OBQDcg+u1#d0C:PcJM7p-uJAL+'7E]4WC?ai.c`)+brRU/-.-R1Kr&34jA[9+WJ[r_]IuPfUSDG=lnqA'(<C4\aI^,_>2c%26Knr%j(?d8Ka2LOLU&k90>f_g\[0'OCZHd"RC1_\@E^b`-q(dI7TN:Z0iDljp*)CCAoBuP$`c@;2j.5FBU?ZeqYMDNgs]FlQ23?%&]$%b,4^h+M00WV#rb'o=lO+#bT?M?,VUs.m6d$_Jr'#'Eb8HB#)IUsdUTOG,`.sf;bCFQ.ki7kX6/C^d"`mo96YX'%nU5V9,$/I%?1O\+G^:i-aho;lTBqR1*QaH\67U7eI7LS:pr'H"hN7r6@:T.o,S45mmN'E4B.".m/]#q2LHULY.Pq9nh::_^`[&0/,_9rm'g&Jd%N$P8u+0*ir,"k'@n;g+LEiW):^U6bP%O>!ea[1SoW!BMpYR!9*p?<ker@F@4X1OMOOS"?Y6ZNHBNJ;5koO8M`6^"o_Uj:koLa72E%ci[sq8:lV+0.#dO,^CmX)s8\C?-+$TT7#ck,VaF%^Nj91Oi4=lC8X;202m,h1'u:beI+bd9sTgN#)IUo1;NMo8R;SoDL)fQ64Yn]%`]bT'DAMq34+9R1F"XA?:/-7'/g%fGQ&1i<6`"bV6DaK$n6f^87'U'\TT;WQ6WHlWO.!m$2C)BHOUMfqLu^Ns<Bh4)ViGL6pSU^[%G]Hc14U"K0!rt<f$26^3%u*N#`"+a<MtfG8i"]GLEk"9<6js,,@lV+oOY)V:V)mb'=+5Z>4EhF&b(9GUX4ni3dFNo9,BJ:N50%M6%XQT-O,9d50C=$#Wq.jhu03uNm/&3/V^^lFJ$_S7:1TYV($,6_#1KrNE^Ofe^Md)]=9Zn$Q)uKgES=JNg%Y-XLaRpd3N8-DTC<7_2%_DRRSp-d^0-%fYre9@HPa=L*%gjgq@"1!Q&ALpth/XCLm+a7:Hp4_0Jp8@;Z#MahLA-_KOZ"+`A,HK2M#Wr2bKF9b41RU@g=#iYG%l9)g5%MKbpj;>(]42?'V6(1U3C<:LE*S7`aiRhJX,EH;AV#9X@<Ygl>8+/n`#m,&s^l*l"]._(j^Da4C?DA=W(YX_ul2m<t_4Asi%*;Cb$V1ddghIaUmIZZT\#OO"GA8r&]d`E-acLB[7mdI`F@gmT-glO'P+5()716sVsQI/8BH)S^G[4GE(a<ARH2$ho7@MesP$uRd6%g1#R<\**YAnO?]bc]6E<KG'&1b)gHLrtaA/!-#8oWiq!;ms*fPfM\"1&r>=oEKc62KB"Pl,Btj%fi*;JS#6=KO<S^BB;4<c:b>Md%Ypk0t:aL-9jU5EgV?c"JRj)MJ>W7`>EA?la`32aaL(FZ9$'Eb?5#@+e*Xt=k@KE>kR`&c6#1%j318"+=9J1o+5[rdtf3Iq%E$GP$%Rpa`KO+i1&O)qcMk9fDBb&Ls+Wi6+:g'XK>P\E7LJN#'bM3)B#.4CPG,7k;Fk3\a2b&hC%q;P%-,.rm<Vk3DA(uY]^2J(TYiA3cE%1BV*q-G)C.ngQfI!LFhaGbi+7Kh`'oZmCf]SI"CSEL@eOC^FW/:B,?P#5;Z7WIW_H&504CQ(SUnSp.r8@W1cQJf%P#\:Rs&"WuqS%ees*5F^n^%neqjQ![dMmf4k_nN2r7QBCLPF-M%4u?d]Tm)&VS&!/;a_!.!oTe)qnEnd?ig*%Bm&=>XD!SMU1YM@A;-fCntT%djk0%oT]\8?El@I/C[9]=s*<UNtn3g/hb_$kt:n)g&:>r+?1a*K1]U4NUnn,(JLa,5-Q$CmE5[:,*atpn=7rp.^<51.ahQh?L#)H=NTd<%CLsCaOVb3=d&r0NMlXdZc8UEPO@!"UqN@Ul^8ps/2])_bE8B];+JZ:'D[<1N?=om=`U[SUdn108^P.,SAW-jV2'&KEe^\+4X)#fa%<Y1"LrN'BqE_[2a0/Psg%_D:aQ0FtD6-?!L9pHHp)'V>6hG1<70(ZG$]jT(t]aIU>X8guda?b!r[Lu(GgQ34qXts*(]'`aql%\7&%WuJJt@gV11)4dRcX,u8#a0)e>olqrFH;a!qXb3-Um(QDo2dTDoNh>O7/Z571*(u5@i[`ElpkE7R-=n[Opguh)e&]!'Jn'ZG+86Ij%</A4Ma+4-Xi"GRl(q^"b-QYOi6_3[NE(+`OPR*g?#1l+`)3M"JaZ=iKkeR6h>p.T')9der*e&;4HR'bor/H?]o]M-b99JK:!\LQE%iKq'9;--?CRNjB=,e<Q-T4l9n6%0LePo9U>_l47J.G?sm*O>oY<k+Is&>#ggF9+TFS<\*qQ&.B1-e!EDOE[gfhIM=nq]j-,<h:WE%c47p$G9)?8\J,q;3'Up@_leGF`549._Z6*l)SqR#j3rD1F<QR!;p>_gY"D:s0O;W)i5uc!l9Hp)P4&a+BacX4PS,9LWp]u%JLE>@%GnKGh<#blk\J<c?7d`.L,I7EV`CM&S!5k-A#\W,]%GX2<OBuX_%\t"(]@;qU<L1df$I0'uA[d?uA0*a#^m2`=LtVoeA/%[+4gQM-%'uMQ<Pth<7,-[-6;JZnfNe@Di6H1*-82;n5c'>*(:,nll7_Z47+aGK8hM%%/a]^DCbpD*te#RguV3TOW*3G)>`u\Aon_ao<=B67A%^;7LI9^G*Kg`[dn&n.>N+upXmTh=r"::\//b+au!njoe`EcH^$2i>QE0TXTmIo[#(PsV6>7-p7,HT3g%FU);3)9kKIQ-OoK;5j-W%j<U]X!Pab>.)<*Egb+%QR@j23jGJ`(GUD>s28#]iZkWM9(EusH).S#`=*cc.,3;2b47S&M,dYTKLhfSGF<VFo4pm:SScJQsEN=1l%SHbjNjnkgd$Mk,l/.E<h@h6,eHq?u":IL.Pk&3soI%T:a`4:FsH$"BAn0><tN$J6=G**:m4q;j.dFcP<T]6;\R8kpga&<_=[gC1?%&D99Pr0`5Y:4c(sD#<$*'"GNI9J6XBM#"lFGrbtG1^jRuVgEf=_:WaK?%d'[V4nJB'4u;R@?i)`/E.Md=!^$SUj'f!!jJgT\JuoM%A"KHS?("#BgN^O;#9ttkaG<IS94:%q%$,^CAAsEFK[YS]O^`]U_[,./%ITQ;LQ)$9&"O9O[MXpUJ)t]KN)#X0+aPSE(WY>GUF)>F%BB_Gb,USW3;RdQ3PuGC<#U>Xg2N-M*<;bN;WDk\!+hnGsNn]_;d=_6Ikr."WAjMf0"A^pS4H]T[V[=In7=4_n,q%PS8Wi,W<KgOR%;Jh.e#,HmAp5!:6LF4b_H.t0:,m$NT'dEE((HWfhA`Q74*>bQ8;-a[Q'+uM3c(Ar8@&,n*OWlK8H-Vd%6bgcRU[tZ!*lYQ)9/?0Z%6oe>&4-3RX9-j63F]E.OY(OT%G"j53"'C#G;kuS<Jbtb::X"TA]H@kpL[PTsqVlb&%uk(k:t=hR-n8@XH5ON9!G>e[<7s\a5(Wb_%mHIN!)$rpoME#pMFT`cAkdL+A_#N0A\aJ+5*7sumc9(Y?!Yf%%.dpC20+sQO)+UnS9/Zgg&Eq]4VVR"PN(+NVp9&=&6tYlDHYc=t%E-b7GWk;tL<^\3ls2m^>FRLK9KIbJ_QGsGD,8Qim0o)gi\GWLupP7u%Y(.lNJN`D3A5YBbgC;q_]Zsdd?cZim>ZfXgkF9?0*FIQ[%gp9SG6*FmUP!/]N'_+$\l_,/koqE;Gm;pqMc:o0PZJusJC\:"ph^16O@(p<6dc[#+]pts&dHRKp-cNT[c*T!5f[6%K\fofN:X!tQ%q4c6\f@N>L:\&Ljc0Pm[S@a*M0clDPH,>6lFp2/m;f]MWdl6,9n_#kU[lhd!@<Ur!ig%$kqRqE]D\JTb&2.4^'VAUpo4h7gfW3u)%L9L"s?%!1!H7B,6^$5.<4f[iB>]:5.=cPrLT%O`6FQj"m7_u?Rg<=^Q_'e5:Z6,>u=CTPH!!N"<_j3uX6s9FJCe4s[Jf-N2Ee:tl%f$_GFP\=:dNbT?]@K_Ft@5WH\b;ZlKj-JO&N#][1XsLOgf+[OaNX\nhlp\'N8=t2H]t%WPprsg:BCg++]e2=Sn"G;tXCX?&!b:J;%=)+a#*X:3#I:,p##e[JUoA=H<r.8E_.u"4$Df$d):e;!2=\AmMr<G878FEXq.?sK+3R6VKF/YL/^V-S6\b:;^5-N%CGm-nm8a&5<%YOu',p%5=e8ff7!rPH".V'J-rR!m!L/_MAanhME--d2Ut,K)7ebEp.9dYOg`DUL&dNH3#/[&]:Q/dbaX9HN@U)-t0u`52Ol/Ld[>%AWM)%CbRBP-fb,QNqD[@kKrV,k!AEb\9?aeY$gZeWE)h+A;[Q.CAS+-X=!X&`t2U![^TTr(5NU((76\!KO9LHN]qgs@V/L3MVeGj%@LUE#fac;:pH87CPb=KP`5Ib%_rNMPZH;m;;`U#/5dLXUW!-(e0m78n@]32s*Qg"3NsA(%$2^9'8[Q484-WIk(Lh]32R9b&`>3MZ%RW>N=$->uRN&B\=J:N^EoSG;sqf3<4@'M7S^g_KWKi',?*2^]\*t&BX9&ci^dC!2`"7BI0;mL%OCU9p6;qSDGh@4Hdr6aT<8LhaC%(XHMUm"UoRO!,jLAE)9I-KYGFQe/cFC9QbQZ@!FnZQ(h"[-X<O60&Fc99C/!^MCicT%MX(gBU2p,JV7LNhpi-Qi^RNCeC&ZOA7'a%0q"RcS*furkK\^.[EfBDD`\0^UEolDj_/nWgkk'Y7ObssoY1?AHBm8S]5!^\^]Ya7*BOMd9D`UL_@L-j4?MO4Z4/%Ug*c/HgqKPN%4+6R>"h2)N5c\..'TZQ0^U?<.<:cBYC[,VE^-8.S4jrgQlV6[>c]@C3)[*T]EW1()imZYjF*E^+U2FK29pgX+LNbs[0^c$n9a!G+%j(NU<\fLLqaU()^*;grA^30I(,!U<pViNk)'1p,2,Fm*@mnu]IQ'WUtoFO(N2sA62/]W\;jFfaLE$>$e+k+cP@IE@Bh3Q)<4T-Bg%W%_"3m;[Wf]D=f?.nG,:orHSX+Z:<W.d6S*F*Tt)r>O;I*i$4]L'jVm%Y#&]d=oU_`.DoobF^\KLUd0X2f*g8n$0+pj"I'BAW>[>%j,Sg"B"@lVDNWV>5P"\!PoFi.YT3\obP^;of)c:R?+)pKQ8+]oT>jY1f([E37(/oY)>pE3,J!hQ(W"R<-hmYuQ^%#R-NO4CZt+e8%omQq*"L)<("42Bo74`Z`qO/%$9d0R3](Lr?$,CjAMJp$#[9f)^AT7aX3g(H8r2K*(hd?P"<_cS6SIGR0[54<_^gu#DCjZ4WDljP'%JEM?qSI)2r7JYp7RFjQ7:7Qu%#>J]J,+$%.'X+b6dgM&nCM6q)o9ZYbAN/ILncE%8jQF6pj)B\hYb^Rg9`o2UB:#"\YHY-sA-=td%IuWj14bE:q$CdsikLOL/8`D7bc"WqHP'XYZ4(g=JRUfSKUQ"lgX;W$no(;kYo-lF.?.\coEbG,f[tWn<=]1a.&3ST#F^n0!A>ArP%/Eho]9gMm?YAKfLB[L9b7\^cJ1:jpa-g(K2VdbbMS*!ObT1do:>Ec:s.^duHog2^:-8nA%^1`PTe'(N1A]eG\>>31m3IVi>ZE0[.%1Fm=`erGRjQdXbIWKd!YP=nKm/4Dcs1*pP^F#+Wc#`hbt8oiC8S(6_ep_Jq[X-P<t0L,7f.P[W_bTVp;+S37_W3cT[lBtcHJ%fTV%dJVcpX,KM"?=bs@&M'W')m_<>?p,4A1gfl3D3#T_-6_C1X=tOcmqF*@O6C_;IGM/R.-.2HN:ghf@3f?3lS@10m'NG+LYoh]etKM*%]["pfIVd%:<fD*@A:<4+eTC.7Ada'=D4eiK(8oXq[f'7[LT^/'=Ic-^XkOb#&'k6a0#E=ea#!`V*dI2o1bZNnDFa^eD#G'k?$d#t%4eBE9Krn!dCWQs#S%tr9mL9$:1VGEMC?DdB4HB3R_N1-_.SC>^5=<n^])D1'[Tof=`,_0W`7@I90B;^<>6DJu2OD<[?ak"t`Be^c%QQ)oA]bA-+1/\-Tq<9S2JW/p%42d+XpL4SiO;Y"tHsO:F$H0p0Bqtg:XFO`T!kD+:bt.MX\<1ODgdn8#ALIK#8-P`NFdnMNVOMYZ%D,aXe5>ETLB"jm##N<$enVe,Xh+"4Q8C#\JN=*VG1t+pj##lD]AY[\HeD?OOl2blDeV8d;C4k;2-)A.Z+<-TcpMb8pD,eCK\_3o<%Ell"5Z;H/ieS2!=%p5nl'\P!D:RJDNh*qQW`I,Qm-)A-;jYj,tic?^[Q2[p-E$5US+h@"V.Ub),/dmrK1to64JIFWOh*qRr*&&$@%aLu00C*aNn7a8J%$Pbp-Od]jTb*3f;Y*6GNC15l$^u=Rd^W+iJ79pErY&@A[IqCplYu!0&mZVi&eap5?6Ifi.ZqtVlZprG%9DA(7%?0=O27!6"Ti6jr3!ommbdc>"iPO)4n\F;NG;\+]MCE)F0.D;^fbs',@H4$R,fr*?"EV_DLJP(Q^rMihhl,iSf\:s3nA0*=%R7%V,%Yph+AKidaHf9NSEH2aG+4Jf]Ff($M(q#]<2s0Gj9iG38aHII31!aBGVF_n4cVnR%M_AW1)(VNl%H't=D/+ALt"$s09Uq\<DS25mO%=A:lr2IDi^h%2.>/VpG9P@U.SrDGdtc(@U7a?4^UpJL7!obPpjm(.A;D8&!WL-5^jFos)Cp&Pg?![P1ED9K!+Eqp;Vr)Kte/iuG=%[foXB`$!iIEPgM6jc!Dilu'AU\Rdn,jr!/!!9^+:lS_Zd&H:WX]?SiZ2sJY6[id7(,=K3#ONG/k0W3d]Rh!('7D@l1MKmt0\$W.^%k<"KKX!o)Os-E(%g\F=Se[VuWJ]e<@D5Z<D.-'a8_9F718NR5;?`4DT5p[;L&A-@<%p'-Im+>CWb-eT3!"Zp;]2$V`ncKbr)-!Wm%ai4LhK_@^>V9:*q2;.f8RcQ@a6>fi@PF[gD+rtR]jD#uo@O`u?LapYE<pg(L[+km[]Ni/7kb_dGR&f[)$@FRL21a@Sbm!XRF+URf%Y:PF%NNc<_C_U/en<O'u`?C6To9Y=r6:B8HasC$,gLBD&J_<deO`^E2Pu.=\#@u8)2op9UCLmWGQZ$$\f#cF<M,k_7WOh`>ir%R3%bNq9n,)ileEG6;2[108ODdh\4=aG'cYjlkh;G(L5KO"T$_&\Kj%@NI:k6#rLcM(.]$*m.T-nm'/\o*1\6Cnq`,rcX7OGcPabSFV3%?OFg.BH:G=CqEM7f7//\DC.7p)*W&.'6$5@3o%;j!%\.H&2r%/lJ(&")s*_t9A(.$+STGb]1_:V%@N07%<KOD]rBZsWr;WJHm(C&%B&iHAk_tLqOp`>U.E2S5I6;>+0=l#"^G\AfNU.?92JfZT[bkuTr.8E_/"ElL[<45_1tH:t9T0FBYYg=_Yli"t=GYE`[^S5%j*=ln%"k"_damLo_3Na*Lm'=TbKn.)pO5u)?'/\gGm?]K1,p2[3>FeDOK<7+/%'-q/YHbKYB>6cDHKsb'.BS-jgI>*o$?^N5Xjk7_@[,h,%+c_oMW2Ek3NM]qd>L(:"4bM7.fT/F!/sbNJCm(MAK@SpU8IGhOa*/RO>Do@`,4"tm;_H5/i^A$h.>,af3,-MXk.M.kZC6&!7F,\j%@'39b9t?@5jZGG!EljIAD:+T+.Qt.oVs]*s>eW]@.]R)aD4N^^RIRt'eue5aPY2^0QosI>EME#Y3)`uK;;.sV.dLlF\9ZQ%b%d(j%,/I9Vg#[0]=7cmdglCkccFL0ig/Gt#q1>]L_*#%UAn*?,`05uJaZHD'3BWlR^R_5s=a(Wc=]8R2p2m_uQlWEI<n7>PLPs`fQ!%We%^fbJb]g%4^_+dZdbNW3D]I*8'V7*XRD5;%e@Xj8O/udTpFIBI@bal6,b!k!*M?bt*<sJ36@fFR\QuqF!F1SY`'N+c"j_8e="74S[%4:1Scibm+(]LX)leF=I3Nfar<r)_PE>:#V^[,PuU4E*KnDEDee=VLX!Qt<NFlGpe[@d@Ek5@#@WHJAFqPM#K6%hU>VW:f,GPk97.%'c##Ko?glI.`o;<H2-WIj97qTU>p8!6aen%C<+oDIRFnH\q;EuFd*-EIDb3$dj)'f.qm`tl^'9/mCqg7Tj*!N>JkE`qg7r.f@V!s%eZh,7:OV'=@5JM`=>&$R8T\dmqce6`C:/a/'[09AHJHIA"ngZ`VPU&emeLQ^NiV9tY?)!QgmIj6D7P)35Icg:j4Z3]29(!u)7_r=%4I3$6iR_=o%c?I7g@C?.!E`.n(p+Un5]325d[066'+'',mag3Ue[:7Y!LPO/KCh!=;^fUa4ZrYu*MdH;d5U2NLg=HJ,2A9^,nk>9%l$?8f8_<^R8IFGe#'Z6eGN?'Nao?(M>W4FP/YHO`p3\?i9no"A&87J;dVpk=B(aA6K0k_E$9.e?5ag>VD$<WbL1%`/%b(@2Ea,\9%Kl_;m4<1#pHco'n#%9Y0"1@"XH1F-jc6iWRmGVS=8Tj&j"j66+<S/$HF#oTH_'j\LO/^JG&=I/,_sq``>3ZVGl\S9`_\&/5eZbWN%".^MN=I&dlboXL0MV*4oL6;)tka%e/nQ&&q*ID6HCYB3QPnO;%7\6>dEf"33&^t7'GXnY^@D7a9I\10I0fCPn*M/lnHojDEpSEXI%fReMp5PQtVFh+BOU:I$`@.UX\%TabIl3l<LG[93d:X[)p.B!im1&^Ikr`h:(GrqY0YiS4q*3Z4E/Zg(Bl-t0GCfjqt'gdc5fIrnC%)fEE<JZ[[gQ?8=,?X^9nQ2&dVVUsH=f%%$mjQF6pj.Lq*7n,\0P;UV<=d>`RZHG__:(YVJ]UYO#<p\P2SH,f+\[/X)8:J7BSR?'K%%qd8G<IYEik6'_hc4+i-Vr"3^8E&o7$YjuqjF\m!hXkukHZ`iZ1B:JLEdBfmk&;MuN/JU*_dgibc%>TKM'^s1W<PamOIVja=,uM9%<luZHcHZk,BBKK0ZVu\!;Rs,4aQ5^Rmd/GjbJ"Y8:6!`aZo'j*X,:6Vh:K2)Z.]Hg*:4%ngup+]-cf,\[d\AGaj,]`:FDNpBanFI%OR+D"jQeY`_::!uE(RlOSQ/)YYJ+84+EkDPWtQa[cZ*@,:7rgHpI\h`XNKFIDU-O"[^PbB`igkM2E(Tuf+$I=-Ge@VkA+ngX]P9N%k&-0kimZN$EqBVTpN8[gg6jX.[;Yn&2f/=JX2;@gg%]\-&00.A=frJ5G%r9S(j:3e28O!>j+F:0iq.CX+R\XP0_]bERlh^C]Uenj%C)JR@VcqUqNrhsY_g#ucH[qM:bAE?e6hBO.XO?p.le@rl*/2:I<e5\TZ#(T,hp1!>q0h#&HgAfbVW%DNA:2Q2ilZk]X+:=Vq%u>K%XVT/7Cb>M]eZD,2_:[U`2i,r_PIA',e]@OI>/?ig[=<pY,fAVqh(Dea4E]N`G*4belPVUqMG2^Z?#+W"H[R*'DN?V-neu++OR#"M%Z56K?=]\D&A%AHbBms>lp4>=5FYC(/]iA:;J$@.K@/2polieM,!I(kXQ#e5(1N!s2F4ENF_2<H4q/Ve3&*0\'khRZ.&GYg`:D%@+%,YO)J!(e>5b:(Hi>3nNl"foq\^*PGb&2sr6L`6Nj*Yn8QUS,=:L`6MujQ4sY;,GM<iKGti=m$ulf8P;"K&TNJJ#Yn][MoB-Pg)!h%RScoAm?,&e$#3(3$cQt7RQ!$4:Re$>2q8B7.]fJOAM=+hq]Td-X="D6=uJ\'ms/j,-:fqp7!R>jeD]%MO[h&K;:\\$-`?,1P>..P%@MR:V9sAXn?QQ'gRimLo5_`!P"/\e3_qZRE@c^8"./:G4QZ?,`/P;'dO@nf/Li*Q6H!sW.mQL.*]muDZ]RKYXgQ"=_6&tXpfK,tb%Bl`H2C`Qi_A+T>=lK`V@TiCJnoK<Vl/o7@tek8MSDW&s"(:HALCROQU4'Bq]lJ\)i"%JQGLeot*BOTY:Zb>*>n@9'6pMRt(dbuaG%$^`CK"j7)-Q8j8m^iBI\E[6S)EhBW2:-:G#$co0o@)63LBCS+WMrdi6DftWPVs]b[L1(,3B0Cn&YZNMcr[qioe?^gJ&1j.WQn4R/%9UhlY/5g^$csCt)eKn<KQ`<qTH-7\8Ass'?//J:ZEA:$;)M2rmOBaVeAm$pQ$\7>'&!G,<BR/b67<5ptF!Oe.Opd)g'hsk7L.mcR%L,m@EDb?V!=sOo4cVin"OpeD7PGcIW9P6sX2NeI>3?jX.8M4#EW\a*>[GZ'bab:l[`L4&-EiG991>A1[>j?T`G;oao*#AY+;c4IO%7B<*VFmB_XY]4O5/-&X7BMr*baQb3BSDjV4C8+X31ncpJKGHW(JdUZT(X6shdJ^%\Fh&j<"iTE;-GtQ-SLLPGUUBVemu&#8%u<#H%*\]<RoVUaTHnemu\^V[@cY<)fgDDOcOe>GPQ`YHtE+.ta&`N`Ba1%Q#2[M)Z<j*hU0$L3I<J05(g$<q,6O2TgeXb^*O@aHF+K)`n%FV,#u53>aa0O/:RB,r^]MtV'^MpOe'/\l6Z>\r9PK4E5P>iB5'BW%["^i3^H)+?))/g//I$B!#]9T%$biO`akL%prTr&GLp?[h'E%DV2U<WA?KUq&3F\mJ>oPCqFJd1Rt,AY]]QQBcN2:[tUplDfomQ^JB8`j3Wf2o)CNs&,kn8MUt-(m-B\&qK)XpP+U'=i<p$!lJHp6%;W0NM-#[)(SbMLBqmLsL,H->q%;M+ZMRj0nK:8llAa)16r+2ehp+nS)WK_b1gG;^l0D(p':9U%koUr)8/Ug;`%g!X%e([M+&u*Mc%9+Pd%@;/J?G!-,T.as.o"JYb)Ta%K]=+3^"#%f1E6P4(/qAPhE"E8J/oAY'-@uqe(+VH6+$uSe-f>b466&_qDp3&#YURa;T_ua0K%>(EY=H:`=aJ1c>"W^"iSe=7(Q;1P)jbT31aUL%(S^f5j6opL'WSnaia0,,N<U8o]>s(Ip`[\[pFZ/U_F!,9;bIn8OqM(Lg_<LB[0%Fp1F[7Rka$J65u8qe>4#OPZTl*J[C>RTZ/2/^9$aV;llX2eA@MWgjU9$$I1mLHg.(S/P?'BudWg1hf/s^-YNjfmp(#Cm]!&HI;5p%YNj7$Na1:6bFT>ShlU"CNSttk<H\$3[Tb36Q.s2oV>?Hl[*<5Y:T-L%/&gC]IGCrmI[>JlP*sNbX0GkpY49#+AZ7^42CjLURa]r+%ZfY]hCY!C"&r?@keo$0uPM<fUWVPT5Z*k;hAu5F8>H,m/j6R9k[h-K$c!Cj$hl\G<(jY;O?*Ui-!@[[-6=Rhb,^-7O'&.lSAM@7$%^1"!'Pd^MtX_=^Rg55)rH/,TFrn&q7cr'N8atS,^#iDfoFWL@.ANEH@p+''b?B=t`C$<j_rQ::bgc+sX$V(9agopJ3P/t?*=5G#C%N4,c:St4V2Uq;bD2mt4O1=*BnPeA47god$?gN_AR=Q\AGDc_a*.<!s`!Gf;"/@MTA!I<S*:KqkoY2qjE;N6Ls9,IDaa[mf>oW.p-%pZFf3#"`m4Z%5V\pV\T08r+k>]ga-BT9B?Og%Co6)Y-BN^WBV2pPoBdi`gHPh`n-'FJhtSO3tM#Er#dY(ptO^3,83FPmGg$%KV`Q%@ck:MZL,eGZjdRLK"R5c=GC*gPBtY1cY@naS+PTZ!BO\"ig;JV81<JaQ5,_&Sp0(;Ha;[N=Cr;0RQYabBg8^/dQ+_=$-6*#Mskbe%9cMN^SsT+q@]D0f@L;/8e#c!p)\GVK`+BsC_\nk]Ut*]4V%?psFN)3?8)De0r.$L-B2i!=K7g#Kr:narg/(e9WA;\/!9_U0rCd76%;_dSbi)fYEQsCF?p=1k?L"S"M#Y6OR)bDQc.?&R"ZT\7e<cPKIU\6MZ+6aiq_C>dF^4#[]nbfQ1$1&u=)L>qt1*uh"Fj:`t/&c[O%NXOB`%i\6(Y/k3ncut9$`'Shh1f$tc:YjLQ9c3O!dB1!"8JIt2pM!>PTs(Ht2TuRakphV)+jK47r,-!"QYXk')25TT&^.5Gi!)Kc%5;j0P2:@Y=jQ*A5;NA-\ngD(p0$g>L#na'/bk`=3"SJlI9Kmph,9[a[j(`Bq\g;1(PV["S\iaN3fJ(9bg/F;V10ZM]^*`QcPh)"\%\'i+sS(FjkIQF$kJbH-iX2bSBYj$>"<]l#-&]r^Jj\j7VY.ParCp]N,0U1*0+O08k*:#q3>t=\eMdq1aVdsT5"Lk):EIJTL.>@2u%Ybet6h_*aPl$_<q>$Z"^c0YB\3M1\Cb!lNn6")A^C^?.>g?93%$HG6[MjdqLlYDS*Z`W(bf4=.,Dljl8DGC=$aDf^m:DUi[M<t-X%2cQrhT_]1+.e,)/)`a,4TR.QGX_bFk,-,2]MVc\RbRp:NMfIg%hBWs?&%WjB%bLI?=Whf<]"aho+^/g\4Dj%4k8V^f9GT2P9j!Hl%+16dJRTMcBF>]kc&,/8Gr.olFHRcX2^##!gMek*DR^G@+2mQN[)^%/nHSU1haQ_m86EmrTSR(]PEcZU:i>NBC[F#_;fOYtiB_B$o%B&C$YE/q_[ap2Xo-q87Wgu2u;=.>4XA^,BoAG0jaZiBQe2+F5$m8Mi3me'2=Zf[QDS=D>d:lUVU-&r^]egtW#2C@nO);5Q6C8Qq[%NXR"P_p3AT/8Tegg:J@nTDPj`6Xoi`L\+AM`r-E?nh!$m\_PUt[5$5m&G#d5*m_BgW[kKB^St=8duBRG7WoGb0R#f6?>11eR`JM?%CLL'qCVIp4`9VJKfr`r+i$GR]#Bb<7D\8Mk+O$bG5g;74iS;.k7U#V$e4D/hg"O-$e[p[_0pjV_j7G0To/OTS1HZ2@1S!!#g"h:l%$^-8](_FB)6ai:SbSe^l9u1dTh[>/p_rW]eB/kP=;<-GCL:J:N#u,m#h-n!gnga/qE!C8'as8r^<_opfB\!XSlo656<S`4C%8ABC%@(p<7deqlE*7$MH.sX!6R*2OOMr21%?p,7B[,1G#l988NK/&NiX9UQ9_mqbQPq.Q:E1KN5gE)j)s"h$Q.\m]E#!0eDLLd<Ia,)XX%rOHV1Fs;A&_fd49`Z46i6mKAAGEJY;K>&rDZOCX?lh8N;5$km=X*-t"W7AtW(:em)ZU@KF>X+<]ZQWH*DE[C<2UdOBUjc/71=#KZ%=glp6EZeHE$?D&0-Zdr0m!W'D+?b(B.p:qdQsji8jR-5-U4&n1%a8i^2p$V1mESFH1t.XO:QldNghnmhp#CM;=gh^)HL)^9Bp/Yj%4:^t^in88*.+dS@n5r7@at^WTl6,plXq;1_PDjN$i^UHfEMK&\1Np*p^(uNojjYQ@-O[gs=+-WLis;W*_$+hrS;*\DD1AR4?19Pl%C!K_m@p8"OilQgNUuc8j%M(<[LY(#n.sbC]1rXUX^'^pk;om'9VZg&uk*0Ee`5VXgRFD%SPe0gJYG6l0b&:j;2s["/h9AKY7t3[e%=!]&kk]N\GpU&6="7`@G\I7^C]`$d5au["^AY!%m>NbXQ#]j!YT"!lD#CF$K6CM?kQrD+3f]Z:mWFbZ=o[LP]nCD_siEYd(T.2AM%]tZ!dd\1s6G!%e8;m>IH#!#H)ZD]:#+m[;(0YdV=Rp89^T3GdCC/bHXX5P4`XR7[FAIZM&.L'Y$.>Dp@*dlqfKWdke>+2q9X:8=G%S(J^5q4]`AT4]gqQAu&]Y@DFuC*a)E4pH!WQJ^@7Z46ED>\[D[$E7Tc/qfNC05'%VZ5C<'k.JVE)s"TR/7!/%I-hHpn;b'+!b-QQ%-+#A(T'F4IQEJq9f8@`)J?<T#Rfa3T>([N]>>iCS<6,uYi?=9+hCYF4%Dd?=L2"?be&4Dl/A5kS30RKkRJE^I"Ba$6*dSugj=u#]%_D#h-d1J:<)$e%j-aJWC.\s[Lfdmd@H00;K2aa=.,Brnb,(Bd>r:3L$CK;KGJpG-M8UT7gm3g,l!"pPeCP@k+iNoB_=XDGYO-#O6%4tjiE-@Y^"WPom&YHTl-)7d&>#O$9,1Rq^5G^hj%mNuFP%F//lf0/Y#K-"e0/nf#1K6'1F0.h"0pk?[0#RN#j#"j\!C@]c:`P(V*%/gNc62(^m&'2PCpA!gN);9<T\UZ]eI(_aYo^9g#_r3lM]'3D84T[EIeHq%\.\_&:8-@TENZ`*<jBiHIgmDLNBl>)F..d@rds*8ds%M/SW0HV@hqOd+.j&rMp[@DOM[Wa`V@/U`-rZ"X$r$Z$E5BM"NMo-LiiiqY%S@E6qYXH!J;kddnO32d2Oq%+GLjq\41N<;.eha6?a%7>\(CDthU<Y];'(LiAUZ32P(kj$6)`3V(NVYVSV*'cP]+-LV]gpOIL%gkL)fSDHH"Krr]][G\P96K>k_#XX3aWI)YPZ-YI\I&&n^%%Ob:=YnD?,dEaC$:+m[?6YIHA<VF!0NDl%DZ%^1\+<DH1@1aEe5oprr<IK%,TlEECa"Tm@1b.bDnpkJnHfXER2(rodh9g)5EB=l8%N=smO>b<_uoQb8COIWc33"WP^bh+m`,-aUR*/Fba7;SJ;Aj,_;3'jfP4>or:NuVS2A)'D&o[pZKD.q8kBq]MhrCfMq4M%-S]TaK1%eg]0sN4KRLLU4qJPB^p!_R>#0Qh+']@;EL3+8&>a[qhUb(6=FWnXrf>rBG5T.AF!=c.KN8RrNE>c(\'YX9RG40oaWCM0'IOVie(B%+Z<)Z3Naql:.s^6>AW'sij!JBk4F/:.H2on)lN.I^Q^i=%W(3AMiCZY?"?g1l(1u%R^$kY6h;-6f84P37t02%/n7@"Ku$2\P1tlK%lD+3a=9]SCD'"=<O0AlD(:VgCA.ddK@;d;8BK5ESgkJ.2dXBbPL9g),`,5&<_nn$l]nLR$j4NA"5l+Wl\1Nd\qF0%@#+fm3i*c8E%0jX9W8Kjou3?BBR(_q=F[\l_oY2%l#nq9Qc)"n_c_5=q,:7-^&K@&s:$OM1'6GhTrHh+R5DLma3_VR&4pM>cC;R?6qEO*mOLWD%V%6%6&\0MIV;aO[gMgPe:99-`<6Ao;$TRSt)8DIM[frXcW:3O`DCAStpf>euQMJnP$eD2[2t)E[g`jAo>#P.!esd?Q.LQo./96B6iB%/^<*K*hH!I`F@sFOp7!@&@htA,]qMjdeabp`QTnQ0[20g(?QBQ]$t5Jgj7hIS%7W3<k2taF`q"#rR"6MY]]l`0A#Icq-BJkFIq@n%l.C-4.n*4]q8TI<^rH(RZGkD8(fPltTe/QsV_JH&BE*o2T;o*M;F_;#VT&CQgV1[MTMP\KhFV7d<bK$>*93TCg,Qo25rJXdn_6k&%jjg+unf!V]8U6cOP&CS;c;-10)n(`(Hsu@*kHD$X%FN$;O,@s<%SB(6]Y*uj*0`'1D8Ob/N`>C\gQH(W8C'f[Ycf"S)L1]iYBKpQ%RgnElo83f%l=DuOQ6(Ls9:r]]Uk^4`@,pfe-'G)o3bOtBX@<Sb.5D_#))?K^H$DMHSMj8R(BOaL/XP@sSfnauL#sfjM&nk#SV($.%]laEq_`D_o%@c$)\)0AW1VdAMedB`b\[?QlaOEIZ*Hf\i$$&'G9cTiIYRHp-nI1i?><G:8o=-p:PQn5Pd,83I*'&A=nC#65/C_d-%;E2-rIR^1e\c(q"[d>S;!Sb`p$<t\SBb6<q)I)NNFXrKrkFQQq;M:nl<jhQmYb#*j7)&kl.B'(M%Vu5)fd!Y,K#u^eqB^Z3]L'@9%EKg"D0>Xf3KLgB,V\-J4;(^f=f.-/`="*mDg,p*BIIa>FQs?<f/&dcI.?s,D&VT%H"m!dRdhN8O`N<F@j?9J(G=nU,hAkg9.?m*B%]bf*EeY:5]X3r@;&D&9g/G.$nEd^i\QTTLmqP95HTMB5qP4O.!:25<K?^Xe>#CP"ZEQP@Z5%(Y.+CLN7KZOQc'hTXkq.rqW5qLZ-%.?q]TH^gg-Jo%.Bl<ni'@VM(D_K4iXV(`cr6_bX\r->tEBp9`q\UQrB*9*Z<YmICoUU[*]Q,Qs9>(mo$V&Ue2=1=,>?RN,ibOODd%rT_JXR;c`XQDs1;*EhVbFD;P,*Go;P4n$aCnjg<h+utdb1=DeqjA/kccb![*R;:!MU<tK_T?+E2c/?Z4SX(%jol58>HV)m$Lhi+l%k$"Roan8#8OnrAlf!%`:1s48_\JD0!pV#Rc\p*PL,Mo&Ij\[EE)F^R7H$D@%<F"t$60I;JPF.sNR9g;_0*h(O669Jtd&q!N?DN:k%5usLcj725=QM,Yg75b4VRjbuj,hT%:?9Xa7nA!%24[]@3F;4JhfmjrHrd[S7#H<K6M(?4Y`)?KXk].U":.1-q=!O2M6_'<,>45mt%SVNPI"AH(kiT1ui,;RBuEY8KBGI*'k&!<gH")$$C6cA,[3YPd_l="6VB6<s([+4Z&H$$URFBJJC&cMA[gD)NSS2RKC#Y:UFqnB<u%9r0HPnOC2MU'I#@.ckUWOZt^;8KM,#\7^\+TH7?%<;A*13^C_-&TU"/b=A,FrFU;b<^GTIYJT^;go^Q8#AM]s%8_G_g)5'=O"[Cq%1JV3FjdOU38L(bVR*_m(q)sWhf-JO+\Xk9_&t/:OUX%ju1Vb!Sj$GoE>[)+L-20A`+Wb%jJ18:hh@qEE)%M)`E/ph$Qtlna1[=(+%)\PS%4fD'1>Q5na>_?[WB4chmOAq]4f)[6<'55>r4MVrPUYd92>SGaP]L;k`+AS!ffj;`.0]*u`0OJT?,0]kOSDPj6S2QrN8(G!7%a?8k&/"N"H_7A_8fGL/hCl`*KZNr8:DE3<LDZT!.7o7'F.'`/chr;fq0Z2)+&)U(oV=+0KghY3W!'<M'QY\\9YRmIAq7+gC[kmCr%pW<grj*]"e9"$ZiDr)`O%*mDc@BpMd"sVd_F!E`_6C'ue_joGbhW4$Yq6e2'=A9,D`G0R8/QV$M,@_2!H7FY`]dX/,qd)KL042)c%-bCU(ZPTo.2mG@Go0mG^50r&L;(,"Bo>W$M-Hu9)c8OVTmdkEf_M2mE4>EaEX>^;/@sp!i)%;iZs):^;Li07b\$0;D&#>03>-R)M%;`.JI3%8>cf9R3`F]&Fml?-'rPQBcE@O#H#^t-&QboqlZX^R+5/XjUm<,a9e_h2m4]!kcZCCo&q0i711T-s)k$Jhu+D.\uYDEGef%nf[[9F>UJVUlm?HHS!2Xp'beI2.a#<:HF=P=AI^l.d=hDkG#Z5>kQU%m6hj;`73I'R*0,lBK&LEo[NRXdV+:81pOq"'K5:9Xc6H*%^`@/B(2Q43c=>VBmN9c7$]?5/_=Cc(K-Hr]bAnL.a#I.(?T0AsrUc<;HqlWK)NWkA#e'7/BX;>ViG3[pD.=8efK/m)X4mb_k;k8u%62-WYMG$(F6'nF@h(]Bs]XAqsV-C[A'G)qOGUQnl>sG[\odYGmmUri]A(j@r<R7Fbd$Oq5W^cR.q9Zfh>:o`1WX1T\a.c3'C([Af%OnVl]&q.+D3OXZM6o(ST&AL@)",?M7BZ)@6l%j<:M_FcH=lkap_.6#Cg+jR)D6V`H/leu]$+Y\nS-2[q*frFha2$pk+Hk$ZD_^G<%l+S4HBWZl"osQKcDsu"fAM'[@,TFe!8gqor-a")6o[Gda&B#:4V%T@K7t*X'#sk)4k/uPK9%;=\.cH5HgWK67V\#!2V@oJ7"qjV#%&Bs%n3oR&c*1K^5!E1@n^n_Y7,53%g:'f92\AM;s+HILcSPZH$4S'XUiMf3aDOG^>O<M+XlHjZ?#1)CFdg=?B0Dr-AKHTr6cjB/t%s6`).YGDnagsYJb'5kn@#rg(N6G:Ln"KiI(F.u8XV3"_)1MXO"W!Vm+;[Sr<hDbDZB%+Urf0_-Q5eBe4'Qcu.4a"W*+t6#c.Ns=T%_/PZ9aEUYj[0ZW(8gl7Z.NsV'^:R"9Ar]BH&Bl.MXqH?-(cR^CHJF+Vj=6kc3#qeo<;*hCf*DBe/%%Pu6LCeRD&ORRk8A9!n,[Ng%n,_"SBlD.`7]>e+7u^?o2m,k"4;V/S2+$WcK1;fE.utSl'Bh_1Xq?7jC"!?UX;O6>)PQ<^WgcJ&VL-"GCX7.9KhRJFK3TX+9-Z:1%F1R1)7S&H[):F1=*Hq+]'L4^+"ujOtk*W[S8FeJCNDNiU5&,ae.'JZo)Bjo,0=Z85+]Bb95(0o(3BP>s\S+`C./eD3ppjhlO?%=%%*50(@VF+tmjU5l2.l>0NYHP/Z^mmCt5eOtbjZE>SQJe[4mXoJhK4Mrdh_Ve'%Z_(VYjL3:[o8rGI\2,UmqsTCGl,`MI-GRar3Nli%r0K'DJ,SIF^\Y#)pOE!oJ,&lp5CNRlTDuJ#rTip%p\R/\\Kt#JIt!gBDO'1,b8Am7qsOaaotQ"Pja[:/rML`dI/EcXmsb&<\$(;V%nr(9_MdQGXe%bk[qbP!,i=E^%nP=*')X',0rUoXYlJK>SlSj=mn*Tq#oCg@7rDboXrr0n8TE"9F?es'-S,7\Z@t/Y$ml1:;"mPYD%W9ptNIt'Jk4njI(e,@>%^]3i=DWkHalJ#[\rR_'m]`#b(m,.`#;R,(n6@Z&F/?G@fhnE44h&TFSB@sb;_!.j0827uEB7`%#EcO0\%p[Y21)MN!U09H'TB\*C9XJZ=7-=,SXd0/%P-591CY?B-Lgq!.q*WEQ]SoPu%8ULhJ4esbGWe9;XRTR,3<Fi)/MgXmtb0H]o]OAe-%)m;2_[IKtf9meRDGL\BEOd,MM8d#l1er(<L4u]b"W;3=@n5$`EJ*sO1U%r\%Meb=QBX1nZ+%o1eHJ]i`-+*<V"nsT=ogUsF)S`o=%4q:TG5r?",*>X];W[ffgLrfnPNQB,WXfkVjQDp]/L&/%%6+:fC"h&M`dPZDXp\P>?@?pafmSTus5.1@f7=XO_I@R5Q\br!D!BiE[%mXKW]Ote"U,DLLcpD)<KND*NEqsp]MYf(K'WZt^mo9bgA^8:MGl2`0\LW>lPmT55CPbhI+H;p&2B>u&/2-2)[HC,!8n`?&q:cIfd%'e]*i0pH:b4%iQ[maT2>@Yo4*n,#OQr5)i5^AV9MaD[Ko<n:MIn`O+/,i?-9X."nL6/4\'Hj:0Z%u"2u3GM!uF=D-r\/"K2@2#,o%$4Pf'RCDU<QUq<^<%\<#48$'Sj`RLm_.a=mqe)`&;E@fUs)cQ-;QP7d[Hoqu8#mGm-#pUJP1$[QQ9I'H%gp']aPm$kG2_!5SkX\;%\X/B-;ci\-VHi'sW:+_Ch%gc];PK[e7YB3k3iRV.[u3dQTPB10>dY\qEC1]@W'pd6E!`!(M'D+]<'K@4<Y!WV_5=sPp&hV0?6j['%?VWHpe[H[gB;=7+Y*K6J'U<<.E'u%"(hHG]$Di3Lr'Fq:31;ilF$2YYgQ>sIZR-1"](lYQQf4G&262)6&.0//I?u[hjD$]Je(#mL%:ElT=YZ5SjE\HB9I`Y2[9.oBni_*8ZcB_c7hKr9l4fc^='*Z]>M`OEYG=App!g=4O-q.r4FHn'1[*%)mU:LOS!tu6FokNS58?%<,%7C=g&+kbjP<TVYLc(bf+Cj-7h-Db_)2b8i1WP5V&\gP2NcoJ/4AS8WXhK?Uj--X&]#=d+V:-oB5(9!,p@YZ/ca]Ne54iq+Ur8_1#%KqgREVm[UPm9!8nnf6do([1IE6nAJ^Z;FCF#$'s2>Lhno3R/+Iq,XV*G9sR-f:A-S.P]g&:0N?PFC$8a=hS>g\%HEXeZq;]FfMI3%Sh(NiSQ2[::9QREATmbKems=k:E+hBQr:B=!>!nIKAQ"?pIVIuN2DtUS+)#q9=gCaf]Jm65_2'jaGBqX1I^^hX_2-ME2^ha<uIT!%'l,4!osD*C,0o\T]6DpA?C0fdbd)[fQT<J(bQ!'[@m@k);^m>orF1o61('J1:_np\e"c^aX$UfeY7??+[A@U?7TJPOQ]D&71cJ4h%bY`+o/-a1XJ%FCa/NoB!,2<OZh&#WTWPF-6_-mc?4aQCTQO2T!]+tNpP<!!S4_Ie)M7kmSe#dmM9M0!7nZ6PB$ph15jRU!fot+)q%,a=lr?.k[QkI^0\`Vmj=LlG>+oMS0LAd(K7=W-k+/F]IEXAoG*Q"H"<_1d8?7GE?1?Gh0M?CdB==A3nGb,iL<"RD_tBL'7/`RM4e%jE#]Mh9SL*\#MVkgUB=[Q!W&9;Q;bJ/@W0H6a0.$R'TT<M8Is$\5_m;8I#^l<9>Bd/e\kO=;=ZV*AXjGfFc%ETNoCZAm;:^]&_Xm%q<lC)RA3*#l@Q>m:X!2t81Sf^1n*kd7ejmN%gq6PqGJt+AJ3$`?PbJ;eHE@YK$RJ1LGRss(q50>:u%)-_XTdf9MFA.mKHA"6Uo^K%G_0<<C7qL1D^ne;U(2b[<7dNX.Au>L^TYPak>o:2BIR6Fp6$Fd29=-b^IcMnfh]/O`,5";`M_3S<YPp-91;hK=_1)O&K`c&Vf/sO%gZ7.176/@"+tf[Bqc20&JF_?4CE&FY0!(c[5?L_-c$Fle<-<^-2mWJL>&)W>@<q.[S#qm4Y9j]n>kf;"4d.@d_\D2iGJDoNCluXI%9B`fb*hTtgm\+?-;m#K:idMW>P]YPpFN]h<8tR'qrh?*UCoaY1V"URB]1Sl'U0Lj6.%=O*Q)hPgWoAK9*@Os1f5eDsXBs$>]deVn%C<"l-E8=#*a\7stO$_'M,M'0Y(=d?c:A^e!V+Ph0Oru+4de[F2g#!d>XKBtsj6CW(Pjsg;KY+.MbdijsVGBJae6RRI(;nTQAg>Hl%F@c:B6%#H+Y@Uadm<8iX('+*3]Q@1ePrS&&)IR)mC894>_EFc+6q+eEGsKJC1G#Z9Q6-%l&*9cf;=i#iOE-,^"iQ^G6(HTR)OE7o%OGo?1&Z>$=(:C)B&^]=9Al2s)E^U`W[kupU_lddOQ!h>:lPfJ+&lcrIaUKPoLuh=/$Qpo>.j<NlHKZE6U?r5mEK%C"$mtbEg?5KX%jB:151HW1kW.mDj4D1"4VD6@>?SDKYmZA?,P!c4-n?."Y8Bba1RZ(RYRA(9ZA1&UF>hOeWWFU2G,Qm9,7C!0IEXia[.9S/OEC0uH%_,OuX01q[!6lD[igo.Y6Ls4m)`O^o?g1VJWr(?qUDTR3#!f;K>W@[c^7hS(T,$9_9e)X@mW)ESU3Da4[\e`tUQljIC,)n'r'D]c1%0iSWM(Y-32H+BnlKifIU#e^s,V<-j(]2(WmhQ)PBjg+gBN2=se<7n?3:(upG[(d-jh5`"IQW?n>Pb2F]h1SuB\WK6@Yi6fZ3HBM'%#`CsDqmT34^.]ME(J(H5[kGM&0EmW;=IG8JQij0b.&noN4\\nRm\@oH;A.#^MDZ_4Q!6dJM*JAkcU2mkOWXq)=0mKo*2p>'9jTF$%o1Kjo_j"YC:PT53.kOoT0r6^iE7^=elB7/f/.&H?cr+gE5=1h?d+1Nf9Z%ORFY[RX&V^%p.qtA[<4G[6A>#eL-cs<X,:d?XBi]"L%m'nS]kP^9q0SHs:Z2AQ7;M%LBOD40(fq!ZHigC#4MPQXi?=q:u[5h4XlVNJZjHXC<%[B<H4q;E1Ma6=uSu_6`#rjA<13P/N8%^3"%"AMnO<3sMGaWG9bWkQL;HDsp+0gSWXECNJZ+soW.XR;nnk>Top_,Wo7S[O[r(+q]!Yd/+bBdJ#\6[X(`+kflZ,'49^VMZ2VAOS%7%cg,Li-SXf-T_kF,i?aR[J;?7d"^\&t<6W]ZX'Vu*g`BJFX0f+%(@"nb%[#%\kOhge4(Vu5<U(!ndYladfQ'r,LXbV`aeX9u*\t8O%9=O:(;%bV>&i5Z!V?i)"N8uY>9a3&@ZR0_mmSNW0CLPlk%TQpu8@70VQmF$RC-"c7.?"j92Fid"1X02dU5P&E>8(rK]jW3?X`3I^%.MkUCDRpA/hn;dn"<G4;E#&E?^5.RQkSd9c7(Le1Q]tRqKW[l]$S=!27O7k-NI.5a82''Y;+;P4(F?$0QFMZLXYlB1^r\sA$-2\k%Okm;=(.hj,=,lahC/]hA&(LiL<uK]W1;TLWaBCKg/ci&1_hqO=OFq@kiS0J%Dnrt"]Z6a)TBW7h%p3mmR2%!^9*/V2'oK]qWg>.]%g=<[&G2K[)l)ko120N!M$e8D9bgor[XeMiKTj&[qAJ::gOce3SRS0qq[H]@?^gT_`=-$fL1"aRgX2T#>#u:WKTl=e(dde9oMs[0B%Zq)'rGZ:pa=4>u-oO&Qh3HfCO-Jm$;a!e`\dA.MR5\$s[=!9?Zc[E#S?,4P4&k>rOQ*lDQ>8!u[Oo18P!kl6-!7bB$KH>XQQ=Ssc%Ug*.3Aa#r+j(G.nXK.l1U`!ZG5%KqDUDut*aScFm!+Z:&VPbe>CTIC)D)U=jc2`QohoAU.AN@`'B_*B0@`E-G..#H1!>]U(lrO@:%#$"&F6d"IUh/)uE7$sYE7$KQ<@WF^\4_6+u8Ige+DofGIVJ*_cm/A\D_Q3foh/)N@(9(h-Q<-B&jKkYM/A_."10*L;HjW9qKdtQX%<O6A(=U"2h@_YQ#;gM"%!(8pf^fk.K-n&^/aVKppd\+K1J1O%_I1NYU,V8Fo#m"k*(A8VoSHJl.:p-TO(_;^)Z4&Y9Jtn29nttIp%AlB/'3IVB>Mi6+)5S6QR>FnaGk9BL+Q:p<jad;D'U,\PL>n@2Fk"/_*HZrtYjDUi$(ju[G=AY78S2C:2i',Fgfpt3,qCnX7^+a*=%KVQ$fbRg[4cEI^-'/s#L6P&_Q%&pU#P`9_9[`s&Ed^1`E)mHJVPX.f:=;;I^8cjOuX\:bUPe-KmQ7Zc"luoLH!2VBH:H"IO_<R+N%Qe\fW;&HU*6`2UYT7onQ$9>.EcPC)Pj]sVpp?k;3a7a"-Q>T](R,F"r%rKFK%q\qsKbth9o;5@Y/k!V]N-cb-$G"AYWl,]Ulc@on%e]'N0H"mb+4WMH&2!IL[SFe]8WGoSARu+P3KrAlLlHX>[h$^&3"Og5R'50O_US,e-i:091]rKRpC!,7,RFBC`KmPek3cA%0c=o*Z%?'/`/0rl.82gedu:]i*"g#,7\ABVhbIWqPjVb_`@+PIC+M2ahp#A9\VM2M_1R-eTO(<HG1%bW=-9fs_+=>tb0Bq-Y#-7oG8(jEhl%UQO%O;-#Z_A4Xs;^+>Cs;N@37q`8P[M$0C[1IjKc.^Nhj=-U&%*Zdk?Q*!JD2n/mK`79QT.na\7A%N...]c`8g28)][#3PISe>HP%Y8<q(oUK>2Aps]\k2O\+F3h/)afC@.7K\*BH3\_':2.FbQGk,3/@omD0%2b5BkopLYH,IhW<L65>.ok08gRLdmM,FM'P^K14dWl2%S^0d"pD8RZ0FFRVRJ.*P'*`X'RHsPSZuG,./nS&eO_]o7bDKrnGI#f6.q,o4<D]-j/:s[c`hHV;7armS8eH@hPB&rGDRFAk^Z7&S%Q42>qbk7<5HBR`S!6.U'7C&MbeVMMs]m5+T6i)i&/X:qZ?Sqo!.K-&Of5q1[b\'+=L[!B']i%Ee]$\DR/'Yk`E_6"lmmktM6suF+%;!,*Ib$4.\MDddif%qLs;TM4a)*pSZVi0(R<QH/S2(6)?3do;<!RI>4G_t845('CTmRm]YVSoD_RY?FVL0SbZ8m7P]2e:G'ipS%'%b.C88nWQ3sOE+IfRc0Ase7Kfs=DHqg$q;"t4.#b>V5pWVf?+)u+6;V)ab%'X*32\-,.Y-rkW_$)rC(qoA@kVUfs]P=pP"#F1OZZe%"(Z@*ogqJg4'fs:.#L=QO!@dnc[.I:ipY!0<!X37`J63RlQjBlJ);h/l=:dCUei/#+qU<@W@iH;9_nIcN]@k>9PDt%2n")'4Vntn%PUFJ?TOe(I;WW7;:q^I";?6^/o<e+I=%?CDnPb1QbUb2(lV]CV?u:PM/12Lq7S1=qVX,?LDLlepM5Ie+M>[TB2Cl_'U(7l0%:pEC%>u303?FsEg`26LPO>iG<g"a2pWMu8S<%f--0C9fL#DJk]@<6LB8Fk8:drc)$(s=iE*PKl&R!eF+.t'NccQO+$fWhG.DKaS;.A+J]%*Y3H/@PUB0B!PsXj[qOfMMI^ZBLeh;gT(ZJ83u>9k<a(oi4mJ`=E4)7p5W=ZC]lL&1f^_FB+o3d>q2dmatG4[1$5(*FoD;KXg8+s%?e%]40ubu&@ht:/-2*YK.Pa2`F6S%$qGNU)Js#Mng]oW,2/XnIOHK+R3)&kogS]d7anV1S8'K7UZ^lTOi*[U+kdTtOir#XP<Lr=&%9NS4UbN;neO>0$A>Sc[00j,kj6!',X=\kU)`>NR^7_'<aVb2$8bN7s-b+q*Sg>IuF&dtO_1/fIi%k;qs`.%0T4cr8pJjP5V_PX)a%#L"XCC#(=*(r'Qr;Z8]<Q"17-Bu)3?T-F%(cRcNRI7@*OVV%":&ZT!j'NKX7Q7Kk5EJQ"T,)V[C+l$i_F(!i@8iL!DGEt2qp\K#$%LqTQ'DA#&^8TF?1jB]8!EnZW7<6Q1)P4P\s.Pk\b:%/qSRg@bq,IR`a8WMLp8M1o9Nm69kIO'.q\da_<107oW)HkOXNTuP+7W*Na%'2,M;9Lb1)>t;nRfB"bO]CFuBlq^4-'`o4r)m>Qk:aJIPnK<$fX,qI+VH-Y`:Lumj54f!M8#=*nN05J/V,K;0VS"da1!k$$,(:!E%\Ko^i==M0H&Z^h1;dIol^hn[j*CU!K%Nt0S7G=@(OXhl9aE*0qpsI'2/;p],-!]QM_io4M@$c[8noMm]Q'rS.<KsbE?#.=DKdGY2%0:AaYWZWjZS2fB]%(9%SMQ4</QZ!:8OV.Vs9+FgHpSo'1&8[EV/D2M7Ai<2(.%?PD;l<iNa'iGKRH*?6F\`FdVt!o]:9!t(-^S^m%Jhor"N"]DR(hs9dP:RjcFW'a4Eu7:F3T?u:IH'XWU1@;HS@sPs)C;rF8P/"*mQh-MGb%sBPi43=8%M5CmMVIL'j3-b?9G#G6.lN1%>/_FIeSm0M40c\`.r*]d4WW+d7,W`un7mLome=3:S_,o!"`*^-]F+O(QG+/mf?hL^:rII_.mg$EC^-6S4L#m;'q<NA]qm1E[a_Mq%g?D4tmHfRZVH[MSS$2m],D%C,Z88`<E\lJF@6(ViG>)ge:=P&`QHUH4Z0QE7Stbpudu-m%VT4f0FekE?iY2\s7KNN.>P535KE7c<%)Tr-GVCXA;2)*OQOQkCd-Zu*s`F"%W4fmkH@EH@="*3$f";R<##$H%3V=Kf7$&>&"@8EbPhO:3sXa*q53Q'0"[]e,n)BnF`aaLZ.%`n=G5H)VXneT,I,>TjD3!ji)QJAk=<2O*N8%]@cZ,4ar+b=,/.Zk3IFTP9rcMGl8'S=+"GRN[V=h99&]fa*A]>l\uKdohaE(-tBT%*X8-ZHk<A8,E=6)eAEZG%HHOi"=At$H^OsB1DUC)et:THr'R:j0jQ5>m(<%M=>.4mZKXVLH3<-QA?j^]Q/*h:'5=7ODn6GSr'+^+%dLM_,I>I6:i%,JP&ZO!qV>!P=[$[NnI`N.H?J4,b3b?81^=8UhKOk(Gj;72(j)O)BP/bh-4g8*]p#dDop0RcUA-Dh*T>m'X]ljXA%/$sjj.uuOA:bdO4Sqiak9Fj%^omt:&URnuQ=Xn+RCEBd[h\`.KXBX$gcbpl;cu?pR>g50]KH2m:&PC/AgN?B8p&Gg3MiLnFr2Rs(%d=s4fO@/^]QDK>sOs/"jBt7-HGG`4[,=uWdFf%5l,05Qk'kb;G7Zo+BA1Cfm#'.5AKJJ<MfsTlB6#(qBCo/6oCrNKV6g%CWn1L,5%S"f4jAdt-4?s-,\=b8X3N7h+]2ZH$;Fu/'Y#E"'aEX2=p7,CihJS(;Zpr<pHZFVjLfKYX1S.(8EVss=cXDh_V5bFYS[raK6kJW+A%MIS2J]4M']@?%?q>c;,!>,W=2\Y,QMKM#(\99o':Xq98a+au[Xim^N\0Iu>"dW$L`.E`C:oRcnX`M6*29N.'@/.`R(#sW#!E=B;#%fs.P`feQ/E=t8RA:4TK?70h_c(amd32r]o+'XOe#'%:jBZin1\gFPO24VSdfflRusJ>^*5Y&Mu)'&P:e(G,nu)'<4IeLsYtI]3.G%-l9^.r*38Cmk.\M-=%rr'nYI6cXgf8bpsZ.\'%mR-JjTDgP0\>=)79u'WrPO3-R=<"\(aCN"]WiZKWCqWPlO8``H-AgS+\nDR[D5%XJs7ieA2MD.\U^lbKf'UZ%qK7P5[3K,>+PJ!mRXgAlK:IH*<Z0"*U:Q`K7DC%p<KcIgX"edK1Ie6nkU!m'AlPS=oAAk(_jSiQO^.%]8Bg8jYl'E]O\tK`NlN&^6).@iWaK1ZFJsSkJC2E%>N8+4SP9[K$B&;I["5GI>&>4QXR.$AFWHr-r/$i$Sc%Kkan&g*q:iGA[M@H%-a*:I*+D!&U/cdtHA<.AH!b]&3%RV2CuYo\6)T5+G"4GcAtcho)1jLl:_?bO]&6_@pT9o$ieKZ_SJ.2taWW)G*-6kp^EI/9mLuqN%'0Iju*Q;&U-9t=b*a2(9R0#MI0HoHDU4.kZNI+R+$k>4@rU0IJKQdn>N9""IK^J!9hXqRU6\C/WH[p)(G7B,C=Uo))o7g)/A3A3s%Af?WVO1S^N7,2r*DhPd`]RWRuCV+.$Ce.WLk<fiY:aEZ^Zm2KFYFs'ij^^+Jo.OYl18JsUZa9,DW\&nM?*945V\"mq(1OtQEE[J8%0tPJW'$D,lC0l>`fcnjr.%H$i&k#uZ;me:.VCXnXmT>a:eXiJC`eWDn_L><#i+OlOaq00r</!Dk=IWkhhSj9E3]Fm$Wl,K$enOg]%hR'E'H8)VSim;Wp%bd7/:Q')Nqpq\mHW91'$=OO1UEnrTak'ZJgM<NoE!POCae"f^7Y7O[jP2=T_6aldL(E<jl[g_N/(T;[@i&Zr%41.k)N?\tVgWS$ib[X](@4VYWCg/$KogNQr&>-IVYY5e.^sMP-eU9*.1-V0,:9c39k"E89b\F-A3B4"-9?^X3b,f/O6ai$p#*RFl%"snl`77qrkPnV4*,,r3+ZWM[e;U%JD.Fk\Be%7t61`*(/rQ4#_>dgrm"t;,]ZR^lE?W8Ys`E&aW#/]/@]&E;r)4$IlPN$2tdA:!F%*cpA#$n.#@k7LFRj%Un6%5I`PQK*3WYkGU>-Mob3YE6AflA#mgZ]WVM2=Z!]C662'/!*G\M9A:HL)q[KTb'`Kj(cpch&:07)b1',%F:=3Q@Ksr>H6J2EIO-Lf15Fgc1Nbtr)T`j?blXC0=_joAhX+dDTV`0&4'cHMUh34H;DD5RS74q`6EBh\ZN%Nu^5:k!B$oFi^r_j:%:eO+6kB*+H8rSUY<(ndNLA+MKnQhiQ'sSZ1dgB'UINkXSSqLWL9HoB#+F&MNN-.g-WsgM=_?l&'Y-:nm##oZ!e&\7RBgPF8qa_q[%8u(:'iM69Y,$PW0HKqS$-Y%[$bT)sRKE>TT\?C-?V6Ej;BgV6WaN!^P(d,YX0K"/t-0(*P&>R_W>Tq'rg=.P1M;RQ&)t6<WO9mPZ%N%h%)A2Ug5?2>l1plMgU4MA8fTgrU%iFK[S;&-?0d>XS8d[DoAjDMfXLf'',DPqDkQ0lX.Ug7j9b<f'+lGiT'";`C@n#+%I7CY"G%>Et&Z>MumTP7t3OlZ&O6$`gSU@6]K\.gu>RSAbbtq\7Xh>X`07]QeXeADfQ1<50uCL:-[tmU-Y.E,]uBnO?+*UL7!nA$*aO/7tuZ%dG8X2=e&]6(MT\>9+6q&iOrsi(9;I*`bL^6Lp[cJ9cT@]>d>6&@T@A"2EUb^(/(23ETeOb94g;0'1sp%.P'Eq:'VGiM4XsiA</7X%X!OZ0AlH:3&#hJH)oAfm'pgp\pblPC=-iNgar2B5eki5Q3nT;q\Ad\:(u2W'TW.*l+)Y&2%flH?F#/;.K,SpmKZ1LL`47FB#r,21%j\9.rFNiYsPCWgFBsF5Gk`sU6]uQge$1^XEXlD.@)@p'(Z;t@.7Vf2JdT8NqA6reLl85;`bsP3[8so,qjXfW8X6nW0fS?h8\4H19%^.i>MbYdJ;1<Q^O0ZD1Sc>_q1>_HE5_K[b^-h8nAft[j$Sl/5o2pp1C#%[bT[OGt8A\KsB:[ulo/qH&Tgf?>Y?Ust3)dkR!`hFqt%RtiQm#=7=1]I1;bON_ZIb!l-dCoEM^J:V;_;@Be<Xu?d.T)OM]-W*"M=2GZ=IRSKK&&[6<!63l(l"B08c*@L$Xcsg3"A1?SBD!Ma%Q]W\1Mtiqe1,YPXOk(d<.#Z9WfZ$\^YiFbpR#aOV]'Ur]25N,$lN*u^k4?46'(`>$A;fD@.eR"Ff.(!(QlM.?79q)e"/>EklnoN4%q:Mt7Sjl+"5$]`%_8FWhM#n$+Yea?Y1Th^s:5U\LKV+mYK_*5;ih#0GP;LXC3E%MH2OndmT)7U.5qZbEa7q,Ai*I0>6+^kl,COhG%([_seOi"P9+WW*Rq,7mQlu8*%;!M:@X`H)(ih6kNo"&3Ti@5qf#$1uLYaAi)k0$-W].&V#Rq%:#Bsel0:$4XaRWM)?-d`nGDhi5!%Yn6Y]LnqJNC6mS\-mSNF9rHB8MQ-a!`.<ug*Gj`6>?JD75tVTXnbZSRpbinsZ$T"U@,c=75X'RS@d8`hXV"Qg(oTFe0e>)_=Mjj-%dY9S7?"V3B`F1/oqm/6JrIp$N6VjcRnK"LX(/,:sFM^YmOEh1O)^d2VJ1aFG_Jkp]b<6c/*Pc9p1U0[Z5%MCWOVdLXMFSV?1^6WF%HWYu6%1.\4[i>-UH`AJ+K[pR'<#2?9Z-o^W07IDg5?sa[VK?h.QD<OS=ib0*KU0!`0Y(uo4Z&.9=r!i*]iQ8j<m>FIhB(p28EiN,%W$>I!=LUg]>p@m\0I0t&'6.#Dg29Ul.`[Y/I7oNPPO%d1g4*d:S@]aIc/i7X7H@EF$0d;6%&WNKob7fS4E\<m!\F_VQ'mTE?-S&&%A1Q(\:EpCTI&4'qp3V@YmocV7PmbU3;D?O:D\+A8AcmMmlWEL=1dQuV'Cj]Y)8,*1ipA4l$S)qM)Oi'a_MMY`\BKc?T$"qZfHl]3%TsAG99uJTTG8E.G':)P-F-tWn;Dp8#&bG[+jJ+!j9\0WGZ/pl,LRUHrN"H:N&UrmQMM]HB<g!b+7cC\\=1h\k_09UmngWj]PqrQF%aTdsI1=D?QZK;XuAokaC?FpYFcAFsM9sR8)Of^=D?DpZ=<IPf`?kAs!3Cc22>`-dPC:HPZhBWcgQ0dRp=V'gl1-(6V]HA7LQmVoV%/1g0*/7E/cTnnM)V3,=dklDKL.q9RcGU`:8(ca@j?/!^B*NW=0L+<VAb%=s\@KtKheF.+V<o/lQWoU;KfHkS]2:Gk,b&kZPD#c;n%>*n;A33l]%h2bq@nn3+t,Y5<^ABd:hk[bqbLDrT.0]kVaB:LVe^;k/Sm#F0U&_cC#gkmGTmmC$$?NasLluI3@4R5mVPLp#1(3i"T%CO&]L6=;2CMRPpI;bCgpb)T==?RGe-$-)6Yc1rmCo5!QADVB<]EKbRTfB/0s$jB=G`F2D?NWY]:an/;6%P`PD0O&-%fd<;QdoeUZ%#q[bcMHTF-N3kBDOs`)=Cf@6`6#8(UEH-VTH2H]X*ui)]Rll^X4p<t*C1b4;o)j<F>Z7J'bbkd8K?[t#"j,(71lCibM8&WX-@LA`%].2djl.JV\)`!t3qgp#+k#ur"/kSh.P/'JZ<;I,$Aiu3"KrHM9@!h0L%j\osP3$MCr#g"9>U:e[[t6P>e;OImRN3tIr(cT)2(uas%0U6Nh4Tm'/3dUBO-Ff=M.*<M`9F4PT=GaA-l@"I[W*Blh5:I6US3].&>kN,"T_0bgKOT[2j2PReQLK^;X>mEMBf1"oEM6Pc'b@`7%:PJ!^pe7!j*]+NiD+$/EH`&[?N+LOT'^:5.BCZDLX94@c=[=@s_rbe^6Hre`f#b_G>\;rV8DQG>QKe7aq-hQZnk<</9m%:_Jtng2%BPPHDRGA@p7t_Nq$Aaf0b/e5d^T]teO\E.oF;)R0&Y4Tu,);TP9ZH?YLRi=]<EF0()@QCUFoLXEMA;,8.hp`L;>^D6H2-=lY.<V%%Y\83"$+"oQ<&b9.QR0'J`+DNm34>_;WIE";;GIUs2%t,<=DqE(+plGTU>Xj:Q`7V+=^ek4OAnDQX(H*_j'aQ<`Td*6GQ=7b[kN5e%hJ2=5&MmH"'I/pN*dIb5A=Efcna9TtZ+tX]m_P/2HLSQ;.OmoY2G"Z2&m7(on4C^rX(W-F9t2XAr@GQ)_Z3.U1hEJK01=m3ff=*B%A=7QTLO<jpZBM=^giB-M6(Yu%g,opF;?:9qh+O[LiFWndr%#hLN1aU+oJi:F,f_5-Z.CE>'ePjPJ/^\o7rroa3SXt>88[$)@G7q>%0DQ"Q&`bYGh<DRnr2CTd?:;m]mQj%/Cq;Mhl>F,X8pt2`DRd>]"(QT.]\Q^e6sWs1/EOXL7M329T#V.EdV6pTeOS"]<(5B<$?J7%%5,f*,5G\(dUg*5\;VhSJMD_s?$kp5."G\Q@VRRO#!,'\5!l#ToPfcH"_eu_4R(j-k[+:m>KRC#L9lfGG?Cem%0!`DhP/b%H<&0WG%&qO@!pFpfd!,u[V]N$*@bA<]Doi1Jnc'"$aUf/CUW$iWVC9#.PA852A*W82b^eFJTB85&-a7UR!&ADg&P-+(#Wf[UsZ,O6&7JkQ-%1Q2hFrCRD:Gn>m%?s,]#5Ld-*mRAP$`\'bmi-H!opb:X?c)R7g>O:SaObr,TaKaFAZTk"-n'=LtcGsrB\OW5T3#2/gajh[9DdZ0Y%.1[`Yp7YHF,*'-dfEVn3E7Rt4EdPmPKo>b&?SL4MBc/IlS?/iumR*Bd4ShjbqFu-$=sd..'DWD(9UJJYm?((9;H4j@T[V.Mo;O56%?Z?gA;d28]V75V9-UO!'XR.CW/m/2M3*cqlLaD5:l!?ta/[gP"3(d3tp]3E:8#c#8W^S0_[>,Ul&Fr!Hm][7))-\:a_9Pal36J+m%b2"g`3F^Q$,MCA?AA^%nE[Bnb]V]Wu-D<>113]M>b.0^[:Ol;]Qu"'Lc8#M\0=S'Y:<-rhSk3"li;$=[UN3[rFc,]4D1qhog$FKo%Cm9ghMP7m[%4Z'rA5>kgrPe?WU*Y*loq0$#U4)Jf.h@WHJ8-UZdTu+OMHKW@0l<H2__R-PU,B;EXA>,epp/TT>X`ZhS,9-d3\&HK%_6mke_"`-gpJiELjd"*,?s-"33KDQ3C&o@^AS.(F:*Be8EM0.I3FSDWb(;gIDA6e/P1a-OY#L4i8tRtu#Au6>!&DRHhahr7AB,@T%IU;R$=T:BdMK(rmZS-:324'>`aO*(3Rbr/'%6O*E6<:8VR8q,PDdL>edE8WAS'epnPWD4#W!b=)RXFYk.>7k(M^]@Zf+qCCnjI94%ls[U^Uf.oTN+^4P]AQq\H]"05)QO-bCQrU]%0%0%Y+,eQnelc6DuiaV>Ii[cOt18-j_8h!Auk_tjLH)_q!r7q@X6%?F'[)!,--;A%\Z\VTkKH;O#U1XRR0:AgH$BN3Ib2H91b;oTDmp9H;EPrA<-l,oM+&SjB.Q]A%OSGi"=f=Z5hS3SFsBL9L[oin=I-`VDC>7J77Gad%B/uiHd02,-&L&:LeaW7s`j:=FpeYopCPK4a6nUVcE0P@j?qc5rVm9<4H\u)2^C`j?QfN[/ccEYFR;Tg9&Z,lV;b9nP/;5o>*14jZ%bY525PUmm7H;cGXi=j[7\.AjCf45#9dDtL&>,YV./E;[/CXQ-qk;X\n<jLH,+=8@*B$TOl:I\7gh%f+]7.cS:QieWQ5lNSm>Rl[p%I(2df^aZ%/0@>-1);`T\-<`<1%F-b=Z'=6>dCW#PTTi!bY$Vrq/Ef^ZBP16M66G/X:1N^`Ol[M,M^CS(M)XP0OC:iAcZW<nra`9A%D-tFdF+q'<?;NDFZ['UnFI9'JKe<"_,::].gf[Eqc`P/pUMF(*BU$JhGct$CA62YZ.19Z\i;1)$Pe7i]$K9HF%0\@ec?Cm1ak4OI%U(8Y\-X!70=&?FB@@`5'PYS":=tF$G0.+;*=<hWeYKSL[AZ/1<N`_+%RB7%r8D*X0dBablG+-9u%c^fO+C_#qTC0MhkA/HR3TTq"%.A7['l^LX%V2pu\VB$s)iQb=<gkM=G_nCP&(^c+QWqe!I.[c&<^)+l&q6VfcaQ"^\i#t&-I+(Klmk&@a.c.O9rjdOI0D_aU/:$!Q%[rcm4oJZs$Tj1CW_idl;O%p*BQkiRDK.=-.)q$:B^H'K%leq@1)BT>"f7UGHH8i6Qgph+VV\D]5_RE^*h_(T!4iOJGc^uB'Z8-\[%kMZR=\CJTeOP0u@iFBo'j(-oFbLY@mKCo.*DApa])3WJ5?Eec5<Q3r5#Jd-+&kX_SjSblE;D+bI#d4CO)`CHTeN\5YRnoZc.kEg)%(eQ2bo;_?p+]*7tpWKd\.BVN:''dCdaL^lj0M^Uo@.kGHA])N3SlB)aQ]#;HbO7ZQM(JM7/Y3rYr*"0F#&fX]q0D?+pgQ?;BJ<T+%QR'&PW^#E)((8No_kR1HmKPAuMLU#h:<Pq>=aCt7bNiM9V=_DrW/5JR_61G)MMZcFCm1-1rK;`LnZ0-s#G;q@J-0MaJBH_H,4HEl%6!?rSO?Ml\/2Q.2IjGd??%`kgp@RZmA]V,mHL8b-<=^t8bK54(C/@7HJpV5ZZ8FJ3%tgN,-`BPg?6:">mNFdH0X?GslUj..9e$DK%\+]dtHY$":?JLF?>S"sJNT#JBig_#&5YCEF$h(Tu@EIk#(3Jlr`id[HM-rsZ\j4-\fC/O(J;*QOghiDe!K*!ck]1-95&e[XhF(oj%QjAP:Z^E$"@U(.U7E^j=^ku-QRi%-o"Wp[NOI/l1[:;Dj*ui5jd!<ji;d[/tH/H9LfLoFP@eidHJeL/rO;P_]Jjil7`6]Hg4ZlT)%<VOm/d-Jhgq54<nL`h@&Q#ps+NSCbMX&bo<!I0d$1q%$jB0"j%kS.&H6r't^3e0\cB1F2;-0CGT:HTrGCJ&38SJ_D2FE]Dfmn-b#%@0NI$)B5Oh6$6ZB-q_YiT8_5_B43_D=ea9=4;eP6oV#4>L[$Apmpuh)-=Th@(V8ON$L85V1,"t</]/iONC;ud<GSstm?&4YTi(#A%]1`V?RW8HT$s0_D/n@]+`1h8ioFUgJes&BNN;"-H,uP<mkPH;B11!8I\Q=pa$_/2%DH0^W"C$DA0*B+<@3EQk/24um;i%-&Sr,Id%@G/9ZHd1!fIqlj@.k%E!.4+^;rN,I'^QD)'1X3kZm\*?8fD\+fO=i*855>tY]d2/d=a9#X?#-'+3>FD#+He-'F-a$.T"V;Y[e@>=%ph0j,g?5&/[b"XYb/K<uZ*!tRGg>ntm??SLKSI:l,.s"Ym<:!2\Sc2T4@W5-kLq9iOQn:><R'HZ[C349VEE4:Iju*,bd@tU;;0Sb%dY6rrDJNS\$"VJ@OYXIVKU?P)6fpcg/CqNJef[#T.=YM<mk5I"9Z,CVMkJ]<Ij7Pc=3OpTj=6ITAM3<A`jPTrjU(K)`e9.Z45WH3%*i0"m(B8Fp5$h\f/!G(+i5)ZfRYu)6h'K)^`2Z_31!+H&en[d[LRC/A@]*ilrn+Js-@SuUMPP(enA9=#>oR7C%+SUQ)!$QlR;=4I%/;hs35cSY.lp1+3Jlt4ibe,%;qhs+qB(EE9\&oFWUg?rFXS\O_UOmEsl'FieP@K"`koe[%-;hHAAcNU`/)+/k+3Nb+[NFJ`_UchU%/`G>K>]TM=N5Y80?m#Jl6J-rF2;!g9A*?daqRER"c;7D*Ycf(QOpm3ST0KB6J^f$"74m9O<t;nb6rcNN)mS][Un,-.>#d;rr%n1N%[TN8g.\oqqOO@`BMeG6DqXW`NoN-Z"\_b3L\`nR/+-A=J%U%<=;<CDC+@b[&Pqs+RTiHJt=8okd?Xs+'^(Ahl8<DH8RFb#pX+QCf%EFh1g`7(]q&P's:,idk-[/_95J;Fr3TZ\jP1u:9aUX8>2H;1&Y+piJX)0T0j*394APF@`e8?'![[X'.C5pr)?HAX+mBgKmb-\o(0%6`H@WU/I=(8QRj%iRMmE%hZHY:,"[A-XrA?jAD;3D0n?_jtHTcgD`;_2!,1Fk4^c+[p]kr-\iAOr-$Y3Jg_=cdk_Q:O3L3?l`%e]%E`;R?!Y_M(2G^+/#U+:l),>ue7#]%>T<j4sW6><uLQiF@:!nCOAO@X]"na5%G#=4goSNX5`0.I1eS9@F&h,#)`Cr:&LZoGGE@h;k%atQcb_MY8MO,CX8E4Z]6:r8$FQt988o%-gm?VT^ojl992!"\rs;Y68$2lBlXM85E/*YUM!/Q4?"JjGCO&h-eCYFK_O.B4T@G79,1%>eA)c-SOCsj0E5KGK_j1Hn=XLSr&D^-[:+X<TMe1EA<Id#Acj#Onf9jqp6&(..JNV+N__^+t:05q68li5)JN@0Xn<O5+`>R02;r$%OhZ6K8Q="*\%h^-msk4#mEk1dYJ0tq%mU'cp?Nh"q%*Mp:N'UTruXI.):;eXj5Bt:m-QJ*dn`4-rXZbjqrP#2rN#\eJ,].#5Q(.X%hJ!LpdJmS1pc#tfh>dE;s6IeArS\jc\c5/=J,R8\5Q1(g.s?7;?V7X'i]mG9GMiGfO2(Yla7hfIq;":6p5e+GrUpbOTEF*Oj8E?A%IeVmss7FbN5CWY+:]L$AIf[*0&s*(P(Ou6&rnWq@""KTsV>~>%AI9_PrivateDataEnd